<?xml version="1.0" encoding="utf-8"?><feed version="0.3" xml:lang="ja" xmlns="http://www.w3.org/2005/Atom"><title>(カッコの中の小人)</title><link href="http://ponkore.github.io/atom.xml" rel="alternate" title="(カッコの中の小人)" type="text/html" /><link href="http://ponkore.github.io" /><updated>2013-11-13T17:11:30</updated><id>http://ponkore.github.io</id><author><name>@ponkore</name></author><entry><title>misaki での画像の Retina 対応について</title><link href="http://ponkore.github.io/2013-05/misaki-retina/index.html" rel="alternate" title="misaki での画像の Retina 対応について" type="text/html" /><id>http://ponkore.github.io/2013-05/misaki-retina/index.html</id><published>2013-05-22T00:00:00</published><updated>2013-05-22T00:00:00</updated><content type="html">&lt;h3&gt;Retina Display でもきれいに表示したい&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;iPhone、iPad、MacBookPro Retina model といったいわゆる &lt;strong&gt; Retina Display &lt;/strong&gt; では、画像は縦横２倍に自動的にスケーリングされて表示されます。そうすると、画像は dot-by-dot で高精細に表示されるのではなく、少しぼやけた感じに表示されてしまいます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;これを回避する、すなわち Retina Display でも画像を dot-by-dot できれいに表示するには、img タグに &lt;strong&gt; width &lt;/strong&gt;, &lt;strong&gt; height &lt;/strong&gt; を真面目に指定して、その各々２倍のサイズの高精細画像を用意する、ということのようです（細かな仕様までは知らないです）。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、実際の画像の大きさなんていちいち調べるのも面倒なので、&lt;a href=&quot;https://github.com/liquidz/misaki&quot;&gt;misaki&lt;/a&gt; で HTML を生成する際に、image のサイズを調べて、実際の半分の大きさの width、height を指定するようにしてみました。misaki ではサイトの出力先は &lt;code class=&quot;prettyprint&quot;&gt;_config.clj&lt;/code&gt; の &lt;code class=&quot;prettyprint&quot;&gt;:public-dir&lt;/code&gt; で指定するので、そこを起点に image ファイルをちょっと読み込み、image ファイルのサイズを調べて :width、:height を算出してみました。&lt;/p&gt;&lt;pre class=&quot;prettyprint lang-clj&quot;&gt;;;
;; 以下を template/layout/default.clj に仕込んでおく
;;
(defn img*2x
  &amp;quot;img tag for Retina display (iOS Device, MacBookPro)&amp;quot;
  ([src] (img*2x {} &amp;quot;&amp;quot; src))
  ([x src]
     (cond
      (string? x) (img*2x {} x src)
      (map? x)    (img*2x x &amp;quot;&amp;quot; src)
      :else       (img*2x {} &amp;quot;&amp;quot; src)))
  ([attr alt src]
     (let [public-dir (:public-dir misaki.config/*config*)          ;; */
           f (java.io.File. (str public-dir src))]
       (if-not (.exists f)
         (img &amp;quot;/img/notfound.png&amp;quot;)
         (let [r (javax.imageio.ImageIO/read f)
               w (/ (.getWidth r) 2)
               h (/ (.getHeight r) 2)
               attr (merge attr {:width w :height h})]
           (img attr alt src))))))
;;
;; Usage:
;;
(img*2x &amp;quot;/img/posts/2013-04-19/IMG_1337.JPG&amp;quot;)&lt;/pre&gt;&lt;h3&gt;終わりに&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;Retina じゃないディスプレイだと、image サイズが半分になってしまうので、CSS の Media Query をつかって切り分けをしたいところです（そのうちちゃんとやろう）。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://kray.jp/blog/retina-web/&quot;&gt;ここ (Webサイト＆WebアプリのRetina対応方法まとめ) &lt;/a&gt; を部分的に参考にさせていただきました(ちょっと端折り過ぎた、かもw)。&lt;/p&gt;</content></entry><entry><title>QGIS 1.8 の SHAPE ファイル文字化け対策について</title><link href="http://ponkore.github.io/2013-05/qgis-charset/index.html" rel="alternate" title="QGIS 1.8 の SHAPE ファイル文字化け対策について" type="text/html" /><id>http://ponkore.github.io/2013-05/qgis-charset/index.html</id><published>2013-05-21T00:00:00</published><updated>2013-05-21T00:00:00</updated><content type="html">&lt;h3&gt;QGIS 1.8 の SHAPE ファイルの読み込み時の文字化けについて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;国土数値情報で公開されている SHAPE ファイル等、日本語の属性情報をもつ SHAPE ファイルを QGIS に読み込むときには、SHAPE ファイルのエンコーディングに合わせたエンコーディングを指定する必要があります。国土数値情報の場合は、&lt;strong&gt; Shift_JIS &lt;/strong&gt; を指定すればよいです(Shift_JIS、SJIS 以外を指定すると文字化けした、はず)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ところが、無事に読み込みに成功しても、別の SHAPE ファイルに保存したりすると、保存先の SHAPE ファイルが文字化けしてしまうことがあります。というか、「読み込みに成功してるのに何で？？？」とずっと思っていました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;が、同じ悩みを抱えている人が他にもおられたようで、解決策がありました。qgis に環境変数として &lt;code class=&quot;prettyprint&quot;&gt; SHAPE_ENCODING=&quot;&quot; &lt;/code&gt; を指定する、という方法です。これを指定すると、ベクタレイヤーを別 SHAPEFILE に保存したりする際に文字化けすることがなくなりました(自分は保存時には UTF-8 を指定するようにしています)。&lt;/p&gt;&lt;pre class=&quot;prettyprint lang-sh&quot;&gt;#
# QGIS 1.8 では Shapefile 読み書き時に文字コード変換が変にかかってしまうので、
# 環境変数 SHAPE_ENCODING を空白にして、QGIS システム内では文字コード変換を
# させずに、ダイアログにて明示的に指定する。
#
 
bash$ export SHAPE_ENCODING=&amp;quot;&amp;quot;
bash$ open -a qgis&lt;/pre&gt;&lt;h3&gt;Python のバージョンによる問題&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;ところが問題はこれだけではありませんでした。今度は QGIS 起動時にエラーダイアログが出ます。&lt;/p&gt;&lt;pre class=&quot;prettyprint lang-sh&quot;&gt;# メッセージはこんな感じ
Couldn't load plugin fTools due an error when calling its classFactory() method...&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE_ENCODING を指定した時に限り必ず表示されるようになってしまいました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;これはどうも python のバージョンによる問題のようです。&lt;a href=&quot;http://gis.stackexchange.com/questions/48364/couldnt-load-plugin-ftools-due-an-error-when-calling-its-classfactory-method&quot;&gt;ここ&lt;/a&gt; に類似のエラーがあったので参考にしました。自分の環境には MacPorts の python と OSX 標準の python が入っております。&lt;/p&gt;&lt;pre class=&quot;prettyprint lang-sh&quot;&gt;# MacPorts python
bash$ python --version
Python 2.7.5
bash$ /usr/bin/python
Python 2.7.1
bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;正確にはインストールされているライブラリ等の差異だと思うのですが、qgis が使用する python を /usr/bin/python になるよう、/usr/bin のパスを前に来るように指定すると、エラーダイアログが出なくなりました。&lt;/p&gt;&lt;pre class=&quot;prettyprint lang-sh&quot;&gt;# 自分の自宅環境(OSX Lion) だと上記で動かなかった。MacPorts の python (2.7.3) だとダメで
# /usr/bin/python (2.7.1) だと動く。なので、PATH 環境変数にも依存...。
# 結局、最終的には、
 
bash$ export SHAPE_ENCODING=&amp;quot;&amp;quot;
bash$ PATH=/usr/bin:$PATH
bash$ open -a qgis&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;Python 詳しくないし、原因を真面目に探して修正しだしたりしたらキリがないので、とりあえずはこれでしばらく運用してみます。&lt;/p&gt;</content></entry><entry><title>GISについてぼちぼち書いていこう。</title><link href="http://ponkore.github.io/2013-05/gis-getting-started/index.html" rel="alternate" title="GISについてぼちぼち書いていこう。" type="text/html" /><id>http://ponkore.github.io/2013-05/gis-getting-started/index.html</id><published>2013-05-12T00:00:00</published><updated>2013-05-12T00:00:00</updated><content type="html">&lt;h3&gt;Why GIS?&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自分の日常の仕事の中で、いろんなデータを見る機会が増えてきたように思います。大量のRDB上の生データが主だったりするのですが、いわゆる &lt;em&gt; Visualization &lt;/em&gt; を真面目にやらないと、いろいろと「ハマる」ことが増えてきました。今までは Excel でなんとかグラフを書いたりセルを色分けしたりで見渡せていたのですが、限界が来るのも近い、といった感じです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;最近は &lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt; のようにド派手なやつとか、他にもググれば JavaScript ライブラリならたくさん出てきます。ただ、今自分が直面している課題としては、地図とか地理情報に密接に関係しているものがあるので、自分の道具として GIS を使えるようにしておきたいのです。&lt;/p&gt;&lt;h3&gt;開発のベースとして何を使う？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;基本的に GIS のライブラリそのもの（内部実装）とかには深く立ち入りたくはありません（他にやることが山ほどあるので）。というわけで、オープンソースかつコミュニティの大きそうな（情報の多そうな）ものをベースに考えざるを得ません。今のところ &lt;a href=&quot;http://www.openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; をメインで考えています。ただ最近 &lt;a href=&quot;http://leafletjs.com/&quot;&gt;leaflet&lt;/a&gt; というやつも結構イケてそうな気もしてきたので、どっちも触りながら考えていこうと思っています。&lt;/p&gt;&lt;h3&gt;地図データは？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;地図を表示するには当然地図のデータが必要です。先ほどの OpenLayers、Leaflet にしても、背景の地図、それにオーバーレイするデータ、それぞれ必要になってきます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;背景の地図については、&lt;a href=&quot;http://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt; であれば、OpenLayers からでも Leaflet からでも自由につかうことができそうです( &lt;a href=&quot;https://maps.google.co.jp/&quot;&gt;Googleマップ&lt;/a&gt;、&lt;a href=&quot;http://maps.loco.yahoo.co.jp/&quot;&gt;Yahoo!地図&lt;/a&gt;、&lt;a href=&quot;http://www.bing.com/maps/?FORM=Z9LH1&quot;&gt;bing の地図&lt;/a&gt;、とかは、利用条件がややこしそうなのでちょっと遠慮しときます(基本、社内のオレオレツール用に使うので商用利用前提で考えます))。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;あと選択肢としては、国土交通省が公開している &lt;a href=&quot;http://portal.cyberjapan.jp/index.html&quot;&gt;電子国土&lt;/a&gt; というのが OpenStreetMap 同様、使えそうな感じです。&lt;/p&gt;&lt;h3&gt;表示するデータは？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;「何を表示したいか？」については、まあいろいろとあるわけですが、実はさしあたって必要となる情報があったりします。鉄道の路線情報です。駅の情報については、&lt;a href=&quot;http://www.ekidata.jp/&quot;&gt;駅データ.jp&lt;/a&gt; さんなら駅の位置情報(緯度、経度)とつながり(どの路線にどの順でつながっている) がわかります。ただ、路線の線形（どんなポリゴンで構成されているか）まではわかりません。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;線形までは考えない、という手もあるのですが、実は国土交通省が公開している&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/&quot;&gt;国土数値情報ダウンロードサービス&lt;/a&gt; というのがあり、その中に鉄道の路線のベクタデータが公開されています。幸いなことに、アンケートにきちんと回答し地図上に「国土数値情報を使って表示している」旨を示しさえすれば、(悪いことをしない限り商用でも)利用することができます(&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/other/yakkan.html&quot;&gt;約款&lt;/a&gt; )。&lt;/p&gt;&lt;h3&gt;鉄道路線のデータについて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;先ほど国土数値情報ダウンロードサービスから入手できる、と書きましたが、入手できるのは、&lt;strong&gt; JPGIS2.1(GML)準拠及びSHAPE形式 &lt;/strong&gt; です。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;JPGIS は日本国内における地理情報の標準規格、とでも言えばよいのでしょうか。詳細はぐぐってください。(GML) となっているのは、JPGIS における符号化形式として XML をベースとした Markup Language になります（がこちらも詳細はぐぐってくださいw)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE 形式は、GIS でわりと標準的に用いられる、バイナリー形式のファイルフォーマットです。バイナリーなので直接いじるには面倒ですが、ちょっとしたデータベースのような感じになっており、コンパクトかつ高速にアクセスできる、というメリットがあります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;鉄道の路線情報は、JPGIS2.1(GML)とSHAPE形式が一緒になった ZIP ファイル(N05-11_GML.zip) になります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;入手方法は、&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/gml/gml_datalist.html&quot;&gt;国土数値情報ダウンロードサービス&lt;/a&gt; のページの &lt;em&gt; 国土骨格 &lt;/em&gt; というグループにある &lt;em&gt; 鉄道時系列（線、点） &lt;/em&gt; となっているところからダウンロードします。途中のアンケートとかは、ちゃんと回答しましょう。入手できるファイルは、11.61MB 程です。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;入手したファイルを解凍すると、以下のファイルが含まれています。全国の鉄道路線情報になります。&lt;/p&gt;&lt;table class=&quot;ink-table ink-zebra ink-bordered&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;ファイル&lt;/th&gt;&lt;th&gt;内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;KSJ-META-N05-11.xml&lt;/td&gt;&lt;td&gt;下記の N05-11.xml (国土数値情報（鉄道時系列）データ) の XML スキーマ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11.xml&lt;/td&gt;&lt;td&gt;国土数値情報（鉄道時系列）データ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11_RailroadSection2.dbf, N05-11_RailroadSection2.shp, N05-11_RailroadSection2.shx&lt;/td&gt;&lt;td&gt;路線の線形情報(SHAPEファイル)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11_Station2.dbf,N05-11_Station2.shp,N05-11_Station2.shx&lt;/td&gt;&lt;td&gt;駅の位置情報のSHAPEファイル&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;データを加工する(QGIS)&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自分としては、JR西日本のデータだけが欲しいので、それ以外のデータは取り除きたいところです。プログラムを書いて GML データから抽出する、という手段も考えられますが、ここはひとつ勉強も兼ねて &lt;a href=&quot;http://www.qgis.org/&quot;&gt;QGIS&lt;/a&gt; を使ってみます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;strong&gt; QGIS(Quantum GIS) &lt;/strong&gt; は、いわゆる「デスクトップGISツール」で、Windows/Linux/MacOSX/FreeBSD等のプラットフォームに対応しているオープンソースのツールです(ライセンスはGPL)。ありがたいことに、GUI のメニューがほとんど日本語に翻訳されているので、初心者にもとっつきやすいです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;2013/05月時点での最新は v1.8 です。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;264&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.15.01.png&quot; width=&quot;380&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;ここでは、QGIS を使って、鉄道時系列データをいじって、JR西日本のみのデータを作成してみます(QGISのインストールについては割愛します)。&lt;/p&gt;&lt;h3&gt;SHAPEファイルの読み込み&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE ファイルは、QGIS上では 1レイヤとして取り込まれます。ということで、[レイヤ]メニューから[ベクタレイヤの追加...]を選択します。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;45&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.30.png&quot; width=&quot;172&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;あとはダイアログに従ってソースタイプ：ファイル、データセット：.shp ファイル、を指定します(エンコーディングは Shift_JIS としましたが、Shift_JIS 以外で OK かどうかはちょっと不明です)。まずは駅のほう(N05-11_Station2.shp)からやってみましょう。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;99&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.20.50.png&quot; width=&quot;270.5&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;Open を実行すると、「空間参照システム選択」というダイアログが表示されます。ここではとりあえずデフォルトどおり、&lt;strong&gt; WGS84 EPSG:4326 &lt;/strong&gt; を選択しておきます(というかデフォルトのまま変更しない)。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;341.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.21.25.png&quot; width=&quot;330&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;そのまま実行すると、&lt;em&gt; N05-11_Station2 &lt;/em&gt; というレイヤが作成され、駅の位置を表している点が画面に表示されます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;同様に、路線情報(N05-11_RailroadSection2.shp)も取り込んでみます。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;98&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.46.png&quot; width=&quot;270&quot; /&gt;&lt;h3&gt;属性テーブル&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPEファイルは地理情報をもつデータベースファイルのようなものです。QGIS にはこのデータベースを直接操作する機能があります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;まずはレイヤを選択して[レイヤ]メニューから[属性テーブルのオープン]を選択します。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;152.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.02.png&quot; width=&quot;172&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;すると、以下のようなダイアログが表示されます。ベクタレイヤを構成する属性情報が一覧として表示されます。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;300.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.15.png&quot; width=&quot;625&quot; /&gt;&lt;h3&gt;属性テーブルの操作(不要な情報の削除)&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;属性テーブルの右下に[アドバンストサーチ]というボタンがあります。これを押すと選択条件を指定するダイアログが表示されます。ここで、「西日本旅客鉄道」以外の行を検索し、行削除をすることで、JR西日本だけのデータが出来上がることになります。（メンドクサイので説明は省略w）&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;で、削除が終わった状態で画面を表示させると、以下のような感じになります。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;361.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.45.39.png&quot; width=&quot;581&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;大阪近辺を表示させたのですが、味も素っ気も無いですね。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、この状態だと、「すでに廃線となっている路線およびその駅」とか、「ある時期まであった路線が少し移動した」といった情報も一緒に表示されているはずです(時系列情報として持っています)。ですので、(自分ツール用としては)「今生きている路線データ」のみにして他は削除してしまいました。&lt;/p&gt;&lt;h3&gt;ラベリング&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;QGIS にはラベリングという機能があります。レイヤの属性情報に応じて、地物(地図上に表示するブツ)に文字列を表示したり色分けしたり、結構こまかな表示制御を行うことができます。[レイヤ]-[ラベリング]を選択すると、レイヤラベリング指定ダイアログが表示されます。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;249.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.48.19.png&quot; width=&quot;355.5&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;デフォルトでは、一番上の「このレイヤのラベル」のチェックボックスが off になっているのでまず on にします。次に、ラベル表示するテキストをドロップダウンリストから選択します。この SHAPE ファイルではぱっと見わかりにくいのですが、N05_011 というのが駅名を表しているのでこれを選択します。ちなみに路線のレイヤでは、路線名は N05_002 なのでそちらを選択します。今回は路線名を赤くしてみました。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;249.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.52.21.png&quot; width=&quot;356&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;で、できあがったのが下図になります。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;365.5&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.52.31.png&quot; width=&quot;581.5&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;もう少し引いてみると、下のような感じです。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;362&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_13.04.08.png&quot; width=&quot;580.5&quot; /&gt;&lt;h3&gt;いったんまとめ&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;今回は、GIS、国土数値情報、QGISでのデータ加工、と駆け足で書いてしまいました(よって内容が薄いorz)。次回からは、SHAPE ファイルからデータを GeoJSON 形式に抽出して、遊んでみたいと思います。&lt;/p&gt;</content></entry><entry><title>Raspberry PI 買ったったー</title><link href="http://ponkore.github.io/2013-04/raspberry-pi/index.html" rel="alternate" title="Raspberry PI 買ったったー" type="text/html" /><id>http://ponkore.github.io/2013-04/raspberry-pi/index.html</id><published>2013-04-19T00:00:00</published><updated>2013-04-19T00:00:00</updated><content type="html">&lt;h3&gt;Raspberry PI 買いました。&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;タイトルの通り、買いました。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;195.5&quot; src=&quot;/img/posts/2013-04-19/IMG_1337.JPG&quot; width=&quot;261&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;通販ではなく、日本橋のシリコンハウス共立で。数日前に &lt;a href=&quot;http://blog.siliconhouse.jp/archives/51988254.html&quot;&gt;シリコンハウスのBlog&lt;/a&gt; で入荷したとの案内があったので、Type-B を買っちゃいました(4,410円)。こういうものを買うときは「とりあえず買って用途は後から考える」ことが多く、今回もそのパターンです。特に何をしたいから、という強い理由があるわけではありません。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ちなみに、給電は、USB mini-A で、これに相当する AC アダプタも必要なのですが、さしあたっては自宅にある &lt;a href=&quot;http://panasonic.net/energy/eneloop/jp/lineup/mobilebooster/&quot;&gt;eneloop mobile booster&lt;/a&gt; に付属していたやつを使うことにして、今回は購入していません。SDカードはちょっと贅沢をして 32GB のもの (ヨドバシで￥4,000 強) を購入。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;家に帰って作業時間を何とか作って、火をいれてみました。SD には、公式の &lt;a href=&quot;http://www.raspberrypi.org/downloads&quot;&gt;ダウンロードページ&lt;/a&gt; から落としてきた &lt;em&gt; Raspbian wheezy &lt;/em&gt; をインストール(というか焼いたというか...)。ディスプレイは専用で使えるものの手持ちがないので、リビングのTV に HDMI 経由でつなぎました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;結果は、驚くほどあっさりと起動(GUI は使うつもりがないので試していませんが...)。&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;195.5&quot; src=&quot;/img/posts/2013-04-19/IMG_1338.JPG&quot; width=&quot;261&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、仮設状態のまま運用するわけにもいかないので、Wireless ルータのそばに移設をしたところ、ネットワーク経由で反応したりしなかったり、という症状が出てしまいました。電源が不安定なのか、はたまたノイズ等が悪さをしているのか...ルータのそばにはディスプレイがないので、ネットワーク経由での接続ができないと状況がわかりません(がんばれば USB シリアルログインとかできそうな気はするのですが、それなりに hardware も要るし...。というわけで、今日のところはここで時間切れです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;でも、いろいろと可能性を感じるおもちゃですw 早くケースを買って(あるいは作って)、安定稼働させよう。&lt;/p&gt;</content></entry><entry><title>いろんな言語でのサンプル(google code prettify のテスト)</title><link href="http://ponkore.github.io/2013-01/post-sample/index.html" rel="alternate" title="いろんな言語でのサンプル(google code prettify のテスト)" type="text/html" /><id>http://ponkore.github.io/2013-01/post-sample/index.html</id><published>2013-01-18T00:00:00</published><updated>2013-01-18T00:00:00</updated><content type="html">&lt;p class=&quot;paragraph&quot;&gt;misakiで google code prettify するパターンを書いてみます。&lt;/p&gt;&lt;h3&gt;clojure&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-clj&quot;&gt;; CLJ
(defn fact[n]
  &amp;quot;factorial&amp;quot;
  (if (= n 0) 1
      (* n (fact (dec n)))))&lt;/pre&gt;&lt;pre class=&quot;prettyprint lang-clj&quot;&gt;; CLOJURE
(defn fact[n]
  &amp;quot;factorial&amp;quot;
  (if (= n 0) 1
      (* n (fact (dec n)))))&lt;/pre&gt;&lt;h3&gt;lisp&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-lisp&quot;&gt;; LISP
(defun fact (n)
  &amp;quot;factorial&amp;quot;
  (if (= n 0) 1
      (* n (fact (1- n)))))&lt;/pre&gt;&lt;h3&gt;sql&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-sql&quot;&gt;-- SQL
select
  user_name, count(*)
from user_tables
where user_name like 'SCOT%'
group by user_name
having count(*) &amp;gt; 1
order by 1
/&lt;/pre&gt;&lt;h3&gt;java&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-java&quot;&gt;// JAVA
public class Foo extends Hoge {
    // 適当な定数
    private static final int BOO = 0;
    // メインだけ書いてみる
    public static void main(String[] args) {
        System.out.println(&amp;quot;Hello, misaki!&amp;quot;);
    }
}&lt;/pre&gt;&lt;h3&gt;html&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-html&quot;&gt;&amp;lt;!-- HTML --&amp;gt;
&amp;lt;table&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;pre&amp;gt;
  hoge fuga
&amp;lt;/pre&amp;gt;
Hello, &amp;lt;B&amp;gt;&amp;lt;I&amp;gt;misaki!&amp;lt;/I&amp;gt;&amp;lt;/B&amp;gt;&amp;lt;br&amp;gt;&lt;/pre&gt;&lt;h3&gt;css&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-css&quot;&gt;/* =============================================================================
   HTML5 Boilerplate CSS: h5bp.com/css
   ========================================================================== */

article, aside, details, figcaption, figure, footer, header, hgroup, nav, section { display: block; }
audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; }
audio:not([controls]) { display: none; }
[hidden] { display: none; }&lt;/pre&gt;&lt;h3&gt;shell&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-sh&quot;&gt;bash$ cat ./hello.sh
#!/bin/sh
echo &amp;quot;hello, misaki.&amp;quot;
bash$ chmod +x ./hello.sh
bash$ ./hello.sh
hello, misaki.
bash$&lt;/pre&gt;&lt;h3&gt;ruby&lt;/h3&gt;&lt;pre class=&quot;prettyprint lang-ruby&quot;&gt;module Nendo&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;まだまだ調整が必要ですねぇ。WebDesignって楽しいけど難しいですね。&lt;/p&gt;</content></entry><entry><title>来年から本気出す(といっても今日は大晦日)</title><link href="http://ponkore.github.io/2012-12/2012-last-post/index.html" rel="alternate" title="来年から本気出す(といっても今日は大晦日)" type="text/html" /><id>http://ponkore.github.io/2012-12/2012-last-post/index.html</id><published>2012-12-31T00:00:00</published><updated>2012-12-31T00:00:00</updated><content type="html">&lt;h3&gt;Blog を始めるにあたって&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;この記事を書いているのは、2012/12/31 22:00 も過ぎた、紅白歌合戦をやっている真っ最中です。実はこのBlog、どういうコンセプトでどういうデザインで書くか、ということばかりに気を取られて、細かな詰めもなにもできておりません。正直、不細工な状態のままでの公開となってしまいました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;不細工な状態での公開は自分にとってはすごく嫌なのですが、「始めなければなにも始まらない」ということを自分はよく知っているつもりなので、こまかな修正はおいおいやっていくにしても、とりあえずスタートラインには立とう、と思った次第です。&lt;/p&gt;&lt;h3&gt;記事の内容について&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;基本的には「技術系Blog」に徹底しようと思っています。自分の日々の出来事や心情とかはあまり書きません。そのかわり、自分が興味を示している技術的な事柄について、書き記す場にしたいと思っています。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、「自分が興味を示している技術」といっても幅が広すぎても発散して面白くなくなりそうなので、ソフトウェア関連、位の縛りをかけておきます。&lt;/p&gt;&lt;h3&gt;2012年の振り返りなど&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自己紹介してもつまらないので、2012年に自分の身の回りであったイベントで簡単に振り返ってみたいと思います。&lt;/p&gt;&lt;h3&gt;2012/04/22 Kyoto.clj 第１回&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/27149&quot;&gt;Kyoto.clj&lt;/a&gt; というイベントに参加しました。実は自分は社外勉強会への参加はこれが初めてとなります。参加、といってもこのときは聞き手だけでした。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;自分は Clojure に興味を持ったのは 2011年の秋頃で、ネットや本で勉強をしていたのですが、イベントがあると知ったので参加してみることにしました。年齢が年齢だけに(秘密ですが40後半)場違いかな、とも思ったのですが、やはりそこは「始めなければ始まらない」という考えに基づき行ってみました。今となってはこれが今年のその後の自分の行動を変革させる第１歩になってたんですね。&lt;/p&gt;&lt;h3&gt;2012/07/28 Clojure Programming お菓子会&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/30330&quot;&gt;Clojure Programming お菓子会&lt;/a&gt; に参加しました。このときは、一応自分で何か発表しようと思い、事前に自分が２章を担当すると宣言して、へたくそながらも資料を作って発表しました。&lt;/p&gt;&lt;iframe allowfullscreen=&quot;allowfullscreen&quot; height=&quot;356&quot; src=&quot;http://www.slideshare.net/slideshow/embed_code/13782976&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; width=&quot;427&quot;&gt;&lt;/iframe&gt;&lt;p class=&quot;paragraph&quot;&gt;このときは確か参加者が少なく(6名位？)、あまり緊張もしませんでしたが、「なんか貢献したかな？」というちょっとだけハテナがつくものの実績を作っておいてよかったと思っています。やっぱり勉強会は発表したほうが自分の成長にもつながるわけですし。&lt;/p&gt;&lt;h3&gt;2012/08/04 Kyoto.lisp ハッカソン&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/event/E0007877&quot;&gt;Kyoto.lisp ハッカソン&lt;/a&gt; というイベントに参加しました。年齢的にもおっさんすぎる自分が参加しても良いものか、と不安はあったのですが、もう気持ち的には「やるしかない」という感じです。Kyoto.lisp #1 というイベントが春にあったのですが、参加できず ustream を見てるだけでしたので、ぜひ参加したいという意思だけは強くもってました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、ハッカソンというイベントの性質上、何か自分でも「ネタ」を仕込んでおかないといけないのですが、手持ちで良さげなネタがない...。苦肉の策で、今も使っている Static Site Generator の &lt;a href=&quot;https://github.com/liquidz/misaki&quot;&gt;misaki&lt;/a&gt; にちょっと手を入れるだけ、というなんともしまらない結果に...。それでも、懇親会で lisp ネタでとても盛り上がり楽しかったのを記憶しています。&lt;/p&gt;&lt;h3&gt;2012/10/21〜24 International Lisp Conference (ILC) 2012&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://www.international-lisp-conference.org/2012/index.html&quot;&gt;Lisp の国際的なイベントILC2012&lt;/a&gt; に参加できませんでした orz。いにしえの Lisp マシン動態展示もあるよ、と事前に聞いていたのですが、日程と金銭的問題とで参加できず。ちょっと残念な思いをしました。&lt;/p&gt;&lt;h3&gt;2012/11/10 DevLove 関西2012&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://devlove-kansai.doorkeeper.jp/events/1757&quot;&gt;DevLove関西2012&lt;/a&gt; に参加。テクニカルセッションを主に聞いていたのですが、参加者、発表者ともに熱気がすごくて圧倒された一日でした。懇親会なしで申し込んでいたのですが、結局懇親会に参加。懇親会での LT 大会もかなりの勢いだったのですが、自分の方が体調を崩してしまい、パワーを少しもらいそこねてしまった感じです。ちなみに、翌週の土曜日に Scala &amp; Play Framework 勉強会というのがあり参加を申し込んでいたのですが、体調を心配してキャンセルしてしまいました。&lt;/p&gt;&lt;h3&gt;2012/11/24 第２回 関数型言語勉強会 大阪&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/33084&quot;&gt;第２回 関数型言語勉強会 大阪&lt;/a&gt; に参加しました。定員50名があっという間に埋まるという、恐ろしく人気の高い勉強会。人気が高いのは事前に知っていたので、早めに会場に入り、わりと前の方の席に座れたので、発表内容もはっきりと聞き取れて、いろいろと勉強になりました。ただ、この場で Clojure に関する発表が無かったので、次回があれば自分がなにかネタを仕込んで発表しようかな、と思っています。(そろそろ仕込み始めないとやばいのか???)&lt;/p&gt;&lt;h3&gt;2012/12/01 関西Javaエンジニアの会スペシャル&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/1261/&quot;&gt;関西Javaエンジニアの会スペシャル&lt;/a&gt; に参加しました。JavaOne 2012 報告、ということでこちらもかなり勢いがある感じがしました。自分は仕事では、.Net 関連のプロジェクトに関わることが多くなりつつあるのですが、個人的には Java 好きです。できれば今後もずっと Java に関わって行きたいと思っています。&lt;/p&gt;&lt;h3&gt;2012/12/21 第4回大阪Jenkins勉強会&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/1412/&quot;&gt;第4回大阪Jenkins勉強会&lt;/a&gt; に参加しました。平日の夜、ということで、しかもちょっと体調不良だったのですが、少々無理してでも行ったかいがありました。みんな Jenkins 大好きで、いろいろとノウハウをもっている人たちが、Jenkins コミュニティを引っ張っていっている、そんな力のようなものを感じました。体調が良ければ懇親会行きたかったです。&lt;/p&gt;&lt;h3&gt;アドベントカレンダーも書きました&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;今年は昨年(2011年)以上にいろいろとアドベントカレンダーがあり、自分も無理しない範囲で３つ記事を書きました。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/04 Lisp Reader Macro アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4195740&quot;&gt;Clojure のリーダーマクロについて&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/06 HENTAI アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4216377&quot;&gt;Clojure から POI ってみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/11 Lisp アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4252252&quot;&gt;sqlkorma 使ってみた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;paragraph&quot;&gt;無理しない範囲で、と書きましたが、Lisp アドベントカレンダーは正直スベりましたwww。来年はもっと Lisp 力をつけないと。&lt;/p&gt;&lt;h3&gt;#clojure 入門者向け勉強会 #mitori_clj&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;Clojure 入門者向けの非同期勉強会という名目で &lt;a href=&quot;http://www.zusaar.com/event/455057&quot;&gt;mitori_clj&lt;/a&gt; というものに参加しています(今も継続中)。&lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; の問題を Clojure で解いて、コードを Gist で公開して有識者に突っ込んでもらう、というものです。Clojure も Project Euler も奥が深い...。いろいろと勉強になってます。&lt;/p&gt;&lt;h3&gt;2013年に向けて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;来年まであと30分を切りましたwww 。2012年はなんだかんだでまとまった量のプログラムといえば Clojure か Emacs Lisp しか書いていない、という驚愕の事実がありました(仕事を休職していたのが大きいのですが...)。来年は、Clojure をどうにかこうにか仕事場に持ち込めないか、考えてみたいですね。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;あと、昨年中途半端な状態で放置しているもの(GIS/MapServer 関連、ClojureCLR、ExcelDNA、etc) をなんとか自分の「味方」に付けることができるようにしたいなぁ。&lt;/p&gt;</content></entry></feed>