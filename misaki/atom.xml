<?xml version="1.0" encoding="utf-8"?>
    <feed version="0.3" xml:lang="ja" xmlns="http://www.w3.org/2005/Atom">
        <title>(カッコの中の小人)</title>
        <link href="http://ponkore.github.io/atom.xml" rel="alternate" title="(カッコの中の小人)" type="text/html" />
        <link href="http://ponkore.github.io" />
        <updated>2014-12-09T16:57:11</updated>
        <id>http://ponkore.github.io</id>
        <author>
            <name>@ponkore</name>
        </author>
        <entry>
            <title>久しぶりに Raspberry PI さわってみた</title>
            <link href="http://ponkore.github.io/2014-01/raspberry-pi-setup/index.html" rel="alternate" title="久しぶりに Raspberry PI さわってみた" type="text/html" />
            <id>http://ponkore.github.io/2014-01/raspberry-pi-setup/index.html</id>
            <published>2014-01-07T00:00:00</published>
            <updated>2014-01-07T00:00:00</updated>
            <content type="html">&lt;h3&gt;久しぶりに Raspberry PI さわってみた&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;以前(&lt;a href=&quot;/2013-04/raspberry-pi/&quot;&gt;過去の記事&lt;/a&gt;)購入した &lt;strong&gt;Raspberry PI&lt;/strong&gt; ですが、忙しかったことと他にやりたかったこともあり、長らく放置していました。で、先日(1/5(日))日本橋にぶらっと寄った時に、ケースとか小型ヒートシンクとかが某店に売っていたのを見つけついつい購入してしまい、久しぶりに自宅サーバに仕込んでやろう、と思い立った次第です。&lt;/p&gt;&lt;h4&gt;OS のインストール等&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;Raspbian を選択しました。Debian 好きだし。FreeBSD はまだ安定していないとかちらほら聞いたことがあるので今回はパス(安定したら FreeBSD に置き換えるかもしれません)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ダウンロードページ(&lt;a href=&quot;http://www.raspberrypi.org/downloads&quot;&gt;ここ&lt;/a&gt;)から Raspbian をダウンロード、と思ったら思いの外回線速度が遅く、torrent 経由で get。Mac に SD カードをつないで、&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ sudo diskutil umount /dev/disk1s1&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;などしてから&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ sudo time dd bs=1m if=2013-12-20-wheezy-raspbian.img of=/dev/rdisk1&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;で書き込みました。作業した日が 2014/01/05(日) だったので 2013-12-20 はかなり新しくていい感じです。Debian なのでインストールされているパッケージ等はそれなりの古さだと思っていましたが、&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ uname -a Linux fubuki 3.10.24+ #614 PREEMPT Thu Dec 19 20:38:42 GMT 2013 armv6l GNU/Linux bash$ java -version java version &amp;quot;1.7.0_40&amp;quot; Java(TM) SE Runtime Environment (build 1.7.0_40-b43) Java HotSpot(TM) Client VM (build 24.0-b56, mixed mode) bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;といった具合です。hostname は &lt;strong&gt;fubuki&lt;/strong&gt; にしました(&lt;a href=&quot;http://www.dmm.com/netgame/feature/kancolle.html&quot;&gt;暁の水平線に勝利をきざむあのゲーム&lt;/a&gt; を参考にしました。すのでな。)。&lt;/p&gt;&lt;h4&gt;起動とか&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;初回起動時は、&lt;code class=&quot;prettyprint&quot;&gt;raspi-config&lt;/code&gt; が勝手に立ち上がってるのね...。リモートで ssh経由でログインして ps して初めて気がつきました。一旦シャットダウンして、リビングの TV にHDMI 経由でつないでコンソールを見てみます。あまり込み入った設定はせずに(なにか設定したとは思うのだけどメモってないので忘れました)、リブート等何度かしてみて安定していることを念のため確認しました。その後、crontab で、heroku に仕込んである自分の Web アプリを定期的に叩く仕掛けを仕込んで1/5(日)の作業は終了。&lt;/p&gt;&lt;h4&gt;timezone 設定&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;すっかり忘れていました、timezone 設定。&lt;code class=&quot;prettyprint&quot;&gt;date&lt;/code&gt; コマンド叩いたら時刻ずれてました...。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ sudo dpkg-reconfigure tzdata # ... (ごにょごにょ) Current default time zone: 'Asia/Tokyo' Local time is now: Mon Jan 6 21:51:04 JST 2014. Universal Time is now: Mon Jan 6 12:51:04 UTC 2014. bash$ date 2014年 1月 6日 月曜日 21:51:10 JST bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;このコマンド、毎回忘れて毎回ググる...。良い時代になったものです。&lt;/p&gt;&lt;h4&gt;いろいろ入れてみる(PostGIS 編)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;マシンスペック的にまともに動くとは思ってませんが、ちょっと興味があったのでトライしてみました。といっても、この日(1/6)は入れてサービスが起動しただけで、データベースには何も仕込んでません。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ sudo apt-get install postgresql-9.1-postgis パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の特別パッケージがインストールされます: libgeos-3.3.3 libgeos-c1 libpq5 libproj0 lsb-release postgis postgresql-9.1 postgresql-client-9.1 postgresql-client-common postgresql-common proj-data ssl-cert 提案パッケージ: proj-bin lsb oidentd ident-server locales-all postgresql-doc-9.1 openssl-blacklist 以下のパッケージが新たにインストールされます: libgeos-3.3.3 libgeos-c1 libpq5 libproj0 lsb-release postgis postgresql-9.1 postgresql-9.1-postgis postgresql-client-9.1 postgresql-client-common postgresql-common proj-data ssl-cert アップグレード: 0 個、新規インストール: 13 個、削除: 0 個、保留: 0 個。 10.5 MB のアーカイブを取得する必要があります。 この操作後に追加で 36.4 MB のディスク容量が消費されます。 続行しますか [Y/n]? y 取得:1 http://mirrordirector.raspbian.org/raspbian/ wheezy/main libgeos-3.3.3 armhf 3.3.3-1.1 [576 kB] 取得:2 http://mirrordirector.raspbian.org/raspbian/ wheezy/main libgeos-c1 armhf 3.3.3-1.1 [165 kB] 取得:3 http://mirrordirector.raspbian.org/raspbian/ wheezy/main libpq5 armhf 9.1.11-0wheezy1 [520 kB] 取得:4 http://mirrordirector.raspbian.org/raspbian/ wheezy/main lsb-release all 4.1+Debian8+rpi1 [27.1 kB] 取得:5 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgis armhf 1.5.3-2+b1 [573 kB] 取得:6 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgresql-client-common all 134wheezy4 [63.3 kB] 取得:7 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgresql-client-9.1 armhf 9.1.11-0wheezy1 [1,337 kB] 取得:8 http://mirrordirector.raspbian.org/raspbian/ wheezy/main ssl-cert all 1.0.32 [19.5 kB] 取得:9 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgresql-common all 134wheezy4 [138 kB] 取得:10 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgresql-9.1 armhf 9.1.11-0wheezy1 [3,339 kB] 取得:11 http://mirrordirector.raspbian.org/raspbian/ wheezy/main proj-data armhf 4.7.0-2 [2,940 kB] 取得:12 http://mirrordirector.raspbian.org/raspbian/ wheezy/main libproj0 armhf 4.7.0-2 [114 kB] 取得:13 http://mirrordirector.raspbian.org/raspbian/ wheezy/main postgresql-9.1-postgis armhf 1.5.3-2+b1 [665 kB] 10.5 MB を 12秒 で取得しました (842 kB/s) パッケージを事前設定しています ... 以前に未選択のパッケージ libgeos-3.3.3 を選択しています。 (データベースを読み込んでいます ... 現在 71054 個のファイルとディレクトリがインストールされています。) (.../libgeos-3.3.3_3.3.3-1.1_armhf.deb から) libgeos-3.3.3 を展開しています... 以前に未選択のパッケージ libgeos-c1 を選択しています。 (.../libgeos-c1_3.3.3-1.1_armhf.deb から) libgeos-c1 を展開しています... 以前に未選択のパッケージ libpq5 を選択しています。 (.../libpq5_9.1.11-0wheezy1_armhf.deb から) libpq5 を展開しています... 以前に未選択のパッケージ lsb-release を選択しています。 (.../lsb-release_4.1+Debian8+rpi1_all.deb から) lsb-release を展開しています... 以前に未選択のパッケージ postgis を選択しています。 (.../postgis_1.5.3-2+b1_armhf.deb から) postgis を展開しています... 以前に未選択のパッケージ postgresql-client-common を選択しています。 (.../postgresql-client-common_134wheezy4_all.deb から) postgresql-client-common を展開しています... 以前に未選択のパッケージ postgresql-client-9.1 を選択しています。 (.../postgresql-client-9.1_9.1.11-0wheezy1_armhf.deb から) postgresql-client-9.1 を展開しています... 以前に未選択のパッケージ ssl-cert を選択しています。 (.../ssl-cert_1.0.32_all.deb から) ssl-cert を展開しています... 以前に未選択のパッケージ postgresql-common を選択しています。 (.../postgresql-common_134wheezy4_all.deb から) postgresql-common を展開しています... 'postgresql-common による /usr/bin/pg_config から /usr/bin/pg_config.libpq-dev への退避 (divert)' を追加しています 以前に未選択のパッケージ postgresql-9.1 を選択しています。 (.../postgresql-9.1_9.1.11-0wheezy1_armhf.deb から) postgresql-9.1 を展開しています... 以前に未選択のパッケージ proj-data を選択しています。 (.../proj-data_4.7.0-2_armhf.deb から) proj-data を展開しています... 以前に未選択のパッケージ libproj0 を選択しています。 (.../libproj0_4.7.0-2_armhf.deb から) libproj0 を展開しています... 以前に未選択のパッケージ postgresql-9.1-postgis を選択しています。 (.../postgresql-9.1-postgis_1.5.3-2+b1_armhf.deb から) postgresql-9.1-postgis を展開しています... man-db のトリガを処理しています ... libgeos-3.3.3 (3.3.3-1.1) を設定しています ... libgeos-c1 (3.3.3-1.1) を設定しています ... libpq5 (9.1.11-0wheezy1) を設定しています ... lsb-release (4.1+Debian8+rpi1) を設定しています ... postgis (1.5.3-2+b1) を設定しています ... postgresql-client-common (134wheezy4) を設定しています ... postgresql-client-9.1 (9.1.11-0wheezy1) を設定しています ... update-alternatives: /usr/share/man/man1/psql.1.gz (psql.1.gz) を提供するために 自動モード で /usr/share/postgresql/9.1/man/man1/psql.1.gz を使います ssl-cert (1.0.32) を設定しています ... postgresql-common (134wheezy4) を設定しています ... ユーザ postgres をグループ ssl-cert に追加 Building PostgreSQL dictionaries from installed myspell/hunspell packages... insserv: warning: script 'mathkernel' missing LSB tags and overrides postgresql-9.1 (9.1.11-0wheezy1) を設定しています ... Creating new cluster (configuration: /etc/postgresql/9.1/main, data: /var/lib/postgresql/9.1/main)... Moving configuration file /var/lib/postgresql/9.1/main/postgresql.conf to /etc/postgresql/9.1/main... Moving configuration file /var/lib/postgresql/9.1/main/pg_hba.conf to /etc/postgresql/9.1/main... Moving configuration file /var/lib/postgresql/9.1/main/pg_ident.conf to /etc/postgresql/9.1/main... Configuring postgresql.conf to use port 5432... update-alternatives: /usr/share/man/man1/postmaster.1.gz (postmaster.1.gz) を提供するために 自動モード で /usr/share/postgresql/9.1/man/man1/postmaster.1.gz を使います [ ok ] Starting PostgreSQL 9.1 database server: main. proj-data (4.7.0-2) を設定しています ... libproj0 (4.7.0-2) を設定しています ... postgresql-9.1-postgis (1.5.3-2+b1) を設定しています ... bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;Debian 使うと自分がどんどんアホになりますね。時間はそれなりにかかりましたが、仕込むだけなら楽すぎです。&lt;/p&gt;&lt;h4&gt;いろいろ入れてみる(Clojure 編)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;Clojure については、&lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt; が無いと話にならないので、apt-get ではなく &lt;code class=&quot;prettyprint&quot;&gt;lein&lt;/code&gt; コマンドからインストール(というか勝手にインストールされます)。これが簡単なようで、時間がかかってイライラしてしまった...。どうせ時間がかかるだろうなぁ、と思っていたので、time コマンドで時間計測。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ time ./lein help Downloading Leiningen to /home/pi/.lein/self-installs/leiningen-2.3.4-standalone.jar now... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 13.0M 100 13.0M 0 0 399k 0 0:00:33 0:00:33 --:--:-- 422k Retrieving org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.pom from central Retrieving org/clojure/pom.contrib/0.1.2/pom.contrib-0.1.2.pom from central Retrieving org/sonatype/oss/oss-parent/7/oss-parent-7.pom from central Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.pom from clojars Retrieving org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar from central Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar from clojars Leiningen is a tool for working with Clojure projects. Several tasks are available: check Check syntax and warn on reflection. classpath Write the classpath of the current project to output-file. clean Remove all files from paths in project's clean-targets. compile Compile Clojure source into .class files. deploy Deploy jar and pom to remote repository. deps Show details about dependencies. do Higher-order task to perform other tasks in succession. help Display a list of tasks or help for a given task or subtask. install Install current project to the local repository. jar Package up all the project's files into a jar file. javac Compile Java source files. new Generate scaffolding for a new project based on a template. plugin DEPRECATED. Please use the :user profile instead. pom Write a pom.xml file to disk for Maven interoperability. repl Start a repl session either with the current project or standalone. retest Run only the test namespaces which failed last time around. run Run the project's -main function. search Search remote maven repositories for matching jars. show-profiles List all available profiles or display one if given an argument. test Run the project's tests. trampoline Run a task without nesting the project's JVM inside Leiningen's. uberjar Package up the project files and all dependencies into a jar file. update-in Perform arbitrary transformations on your project map. upgrade Upgrade Leiningen to specified version or latest stable. version Print version for Leiningen and the current JVM. with-profile Apply the given task with the profile(s) specified. Run `lein help $TASK` for details. Global Options: -o Run a task offline. -U Run a task after forcing update of snapshots. -h, --help Print this help. -v, --version Print Leiningen's version. See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg, mixed-source, templates, and copying. real 3m11.842s user 2m21.790s sys 0m4.190s bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;ダウンロードして help 見るだけ、で３分。ちなみに、おそらくメモリのキャッシュも効いているだろうと思われる２回目の &lt;code class=&quot;prettyprint&quot;&gt;./lein help&lt;/code&gt; は、&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ time ./lein help Leiningen is a tool for working with Clojure projects. -- snip -- real 2m26.445s user 2m20.650s sys 0m2.180s bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;2分半...まあ良いでしょう。本格的に開発に使うわけじゃなし。ちなみに、&lt;code class=&quot;prettyprint&quot;&gt;lein help&lt;/code&gt;は遅いのですが、&lt;code class=&quot;prettyprint&quot;&gt;lein new &amp;lt;project&amp;gt;&lt;/code&gt; はまだましでした。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ time ~/bin/lein new hello Generating a project called hello based on the 'default' template. To see other templates (app, lein plugin, etc), try `lein help new`. real 0m37.365s user 0m36.000s sys 0m1.100s bash$&lt;/pre&gt;&lt;h4&gt;いろいろ入れてみる(Emacs 編)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;さて、ここからがめんどくさかったです(時間的に)。apt-get で入る奴は Emacs-23 っぽかったのですが、常用している Emacs のバージョンが 24.3 で、Emacs-23 では動かない elisp もちらほらあるようだったので、思い切ってソースからビルドしてインストールすることにしました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;手順はほぼ&lt;a href=&quot;https://coderwall.com/p/uztyfw&quot;&gt;ここ(Compile Emacs 24.2 on Raspberry Pi (Rasbian) )&lt;/a&gt;にある通りでした(感謝!!)。バージョンこそ違いますが、インストール手順としては完璧でした。ざっくりまとめると、&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ sudo apt-get install texinfo libncurses5-dev bash$ mkdir src bash$ cd ./src bash$ wget http://ftp.gnu.org/pub/gnu/emacs/emacs-24.3.tar.xz bash$ tar -xJvf emacs-24.3.tar.xz bash$ cd ./emacs-24.3 bash$ time ./configure --prefix=/opt/emacs --without-x # -- snip -- real 7m49.623s user 2m42.200s sys 0m32.040s bash$ time make # -- snip -- real 51m49.290s user 41m39.060s sys 1m22.130s bash$ time sudo make install real 9m25.840s user 3m44.570s sys 1m3.480s bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;こんな感じでした。すでに日付が変わってしまっていた(つまり深夜)だったので、その間テレビを見ながら待ちぼうけ。ここ数年 Emacs のビルドなんて大した手間じゃない、という認識だったのですが、完全に間違ってました。単にハード(PC)が速くなっただけ、ということです。&lt;strong&gt;Emacsは巨大&lt;/strong&gt; でした。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;この後、自分の elisp なり package なりを入れていきます。自分が使うelisp の package のダウンロード、インストールは自動化しているのですが、この処理がこれまた非常に遅い。さすがに待ちきれず、そのまま放置して寝ました（朝にはちゃんと終わってました）。&lt;/p&gt;&lt;h4&gt;いったんまとめ&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;そもそも環境全体が SD カード上に載っているので(激しい書き込みに弱い)、Emacs をコンパイルしてインストールするとか、PostGIS 入れてしまうとか、いろいろ間違ってます。ですが、ちょっとずつ自分の環境になっていくというのは嬉しいものですし、やってみて初めて気がつくようなこともあるかと。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ちなみに、自宅のルータを dyndns.org に登録して、外部から SSH でログインできるようにしました(ポートはもちろん変えてますが)。電車の中で iPhone からログインしてみたりして遊んでます。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>tree-seq のメモ</title>
            <link href="http://ponkore.github.io/2014-01/tree-seq-memo/index.html" rel="alternate" title="tree-seq のメモ" type="text/html" />
            <id>http://ponkore.github.io/2014-01/tree-seq-memo/index.html</id>
            <published>2014-01-04T00:00:00</published>
            <updated>2014-01-04T00:00:00</updated>
            <content type="html">&lt;h3&gt;tree-seq のメモ&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;/2014-01/kilotei-from-wikipedia/&quot;&gt;昨日の記事&lt;/a&gt;で一応やりたいことはできたのだが、もう少し Clojure っぽく見なおしてみます。ついでといってはなんですが &lt;code class=&quot;prettyprint&quot;&gt;clojure.core/tree-seq&lt;/code&gt; についてメモっておきます。&lt;/p&gt;&lt;h4&gt;tree-seq とは？&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;tree-seq は、木構造を深さ優先検索でトラバースして各ノードのリストを Lazy Sequence にして返します。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;(tree-seq branch? children root)&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;branch?&lt;/code&gt;：引数を一つとり子要素があるかないかを調べて返す関数を指定します。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;children&lt;/code&gt;：自分の子要素のリストを返す関数を指定します。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;root&lt;/code&gt;：木構造の root ノードを指定します。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;使ってみる&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;前回書いたコードのうち、&lt;code class=&quot;prettyprint&quot;&gt;TagNode#getElementListByName&lt;/code&gt; を Clojure で置き換えてみます。考え方としては root からたどれるノードを &lt;code class=&quot;prettyprint&quot;&gt;tree-seq&lt;/code&gt; ですべてたどって、あとは filter で処理します。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;(defn- branch? [node] (.hasChildren node)) (defn- children [node] (when (.hasChildren node) (.getChildTagList node))) (defn get-element-list-by-name [element-name node] (-&amp;gt;&amp;gt; node (tree-seq branch? children) (filter #(= element-name (.getName %))))) ;; Usage: (get-element-list-by-name &amp;quot;h2&amp;quot; rootnode)&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;これを使って、前回の処理を少し書き換えます。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;(defn- parse-page-and-extract-kilotei [page-src] (let [cleaner (HtmlCleaner.)] (-&amp;gt;&amp;gt; (html-&amp;gt;node cleaner page-src) (get-element-list-by-name &amp;quot;th&amp;quot;) ;; 元々は (.getElementListByName rootnode &amp;quot;th&amp;quot; true) としていた。 (filter station?) (map #(-&amp;gt; % .getParent .getParent .getText .toString)) ;; 2つ親 (&amp;lt;th&amp;gt; -&amp;gt; &amp;lt;thead&amp;gt; -&amp;gt; &amp;lt;table&amp;gt;) の &amp;lt;table&amp;gt; タグ以下のテキストを取得 (mapcat #(re-seq #&amp;quot;所属路線■*([^*キ]+)\**キロ程(\d+\.?\d*km)&amp;quot; %)) ;; キロ程を抽出 (map rest))))&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;あまり見た目は変わりませんが、ちょっと Clojure 成分が増えましたw。ただ残念ながら少し遅くなってしまっています。Java で書かれた元の &lt;code class=&quot;prettyprint&quot;&gt;TagNode#getElementListByName&lt;/code&gt;を見てみないとわかりませんが、tree-seq でざっくり処理を置き換えただけで特にチューニング的なことはしていないので無駄なメモリ消費もあるのかもしれません。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;まあ、&lt;code class=&quot;prettyprint&quot;&gt;tree-seq&lt;/code&gt;をちょっと使ってみたかっただけかもしれません...&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>Wikipedia の駅のページからキロ程情報を抽出する</title>
            <link href="http://ponkore.github.io/2014-01/kilotei-from-wikipedia/index.html" rel="alternate" title="Wikipedia の駅のページからキロ程情報を抽出する" type="text/html" />
            <id>http://ponkore.github.io/2014-01/kilotei-from-wikipedia/index.html</id>
            <published>2014-01-03T00:00:00</published>
            <updated>2014-01-03T00:00:00</updated>
            <content type="html">&lt;h3&gt;Wikipedia の駅のページからキロ程情報を抽出する&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;この記事は、&lt;a href=&quot;http://qiita.com/ponkore/items/5309023186353de49172&quot;&gt;lisp アドベントカレンダー2013 12/14 の記事&lt;/a&gt;の続きです。ほったらかしにしておくのももったいないので、ぼちぼち続けていこうと思っています。まずはその続きの &lt;strong&gt; 第一弾 &lt;/strong&gt; ということで。&lt;/p&gt;&lt;h4&gt;やりたいこと&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;最終的にやりたいことは、前述のアドベントカレンダーの記事に書きましたが、駅のキロ程情報を Wikipedia から拾ってこよう、ということです。前述の記事を書いた時には、&lt;strong&gt; 「lisp アドベントカレンダーらしく」 &lt;/strong&gt; というのを意識したかったので、HTML の木構造を S式でちゃっちゃとつくって、&lt;a href=&quot;http://clojure.github.io/data.zip/&quot;&gt;clojure.data.zip&lt;/a&gt;あたりを使ってノードをトラバースして、という方向で考えていました(が時間切れに...)。ですが、もう今となってはそういう縛りは一旦とっぱらって、情報抽出に専念してみます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;今回は、&lt;a href=&quot;http://htmlcleaner.sourceforge.net/&quot;&gt;HTML Cleaner&lt;/a&gt; のもつ機能をそのまま使う方針で考えます。&lt;code class=&quot;prettyprint&quot;&gt;HTML Cleaner&lt;/code&gt; のオブジェクトは、HTML に沿った形の木構造をしているので、「キロ程」というキーワードのあるノード (&lt;code class=&quot;prettyprint&quot;&gt;HTML Cleaner&lt;/code&gt; の&lt;code class=&quot;prettyprint&quot;&gt;TagNode&lt;/code&gt;) を上位にさかのぼって探す、といった操作が簡単に行えます。具体的には、&lt;code class=&quot;prettyprint&quot;&gt;HTML Cleaner&lt;/code&gt;で取得した &lt;code class=&quot;prettyprint&quot;&gt;TagNode&lt;/code&gt; の以下のメソッド等を使ってみました。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;TagNode#getElementByName&lt;/code&gt;：自分のノードの子の要素を名前指定で探す。今回、「キロ程」というキーワードは &lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; に記述されていたので、&lt;code class=&quot;prettyprint&quot;&gt;'th'&lt;/code&gt;に記述されている「キロ程」という文字列、を探すことで良さそうです。 &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;TagNode#getParent&lt;/code&gt;: 自分のノードの親要素のノードを返します。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;書いたコード&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;書いたコードを晒しておきます。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;(ns html-parser.core (:import [org.htmlcleaner HtmlCleaner])) (defn- html-&amp;gt;node [cleaner html-src] (doto (.getProperties cleaner) (.setOmitComments true) ;; HTML のコメントは無視する (.setPruneTags &amp;quot;script,style&amp;quot;) ;; &amp;lt;script&amp;gt;, &amp;lt;style&amp;gt; タグは無視する (.setOmitXmlDeclaration true)) (.clean cleaner html-src)) ;; cleaner.clean(string) でパース (defn- station? [node] (-&amp;gt;&amp;gt; node .getText .toString (re-find #&amp;quot;.+駅\**$&amp;quot;))) ;; 駅によっては XX駅* のような表記あり (defn- parse-page-and-extract-kilotei [page-src] (let [cleaner (HtmlCleaner.) rootnode (html-&amp;gt;node cleaner page-src)] (-&amp;gt;&amp;gt; (.getElementListByName rootnode &amp;quot;th&amp;quot; true) ;; &amp;lt;th&amp;gt; を探す (filter station?) ;; &amp;lt;th&amp;gt;の内容が XX 駅 のものに限定 (map #(-&amp;gt; % .getParent .getParent .getText .toString)) ;; 2つ親 (&amp;lt;th&amp;gt; -&amp;gt; &amp;lt;thead&amp;gt; -&amp;gt; &amp;lt;table&amp;gt;) の &amp;lt;table&amp;gt; タグ以下のテキストを取得 (mapcat #(re-seq #&amp;quot;所属路線■*([^*キ]+)\**キロ程(\d+\.?\d*km)&amp;quot; %)) ;; 路線名、キロ程を抽出 (map rest) distinct))) (defn get-kilotei-from-wikipedia [url] (-&amp;gt;&amp;gt; (slurp url) ;; TODO: cache parse-page-and-extract-kilotei)) ;; (get-kilotei-from-wikipedia &amp;quot;http://ja.wikipedia.org/wiki/新大阪駅&amp;quot;) ;; =&amp;gt; ((&amp;quot;東海道新幹線&amp;quot; &amp;quot;552.6km&amp;quot;) (&amp;quot;山陽新幹線&amp;quot; &amp;quot;0.0km&amp;quot;) (&amp;quot;東海道本線（JR京都線）&amp;quot; &amp;quot;552.6km&amp;quot;) (&amp;quot;東海道本線貨物支線\n（梅田貨物線）&amp;quot; &amp;quot;3.8km&amp;quot;) (&amp;quot;御堂筋線&amp;quot; &amp;quot;2.9km&amp;quot;))&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;正規表現あたり限りなくあやしいですが、そのうちまじめに見直そうと思います。トライアルとして書く分には、まあ良しとします。&lt;/p&gt;&lt;h4&gt;今後&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;今回は単純に、目当ての情報をピンポイントで抽出する、というだけのことをしていますが、そのうちに、&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;一旦取得した Wikipedia のページはキャッシュする&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;指定した駅から順次次の駅のリンクも合わせて取得する&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;路線の関連付けまで合わせてデータベース化する&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;(clojure からは離れるが) 国土数値情報の路線の線形と重ねあわせてみる&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;paragraph&quot;&gt;といったことをやってみようと思います。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>random-docs (2014年最初の記事)</title>
            <link href="http://ponkore.github.io/2014-01/random-docs/index.html" rel="alternate" title="random-docs (2014年最初の記事)" type="text/html" />
            <id>http://ponkore.github.io/2014-01/random-docs/index.html</id>
            <published>2014-01-02T00:00:00</published>
            <updated>2014-01-02T00:00:00</updated>
            <content type="html">&lt;h3&gt;random-docs (2014年の最初の記事)&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;あけましておめでとうございます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;昨年末は F# の勉強ばかりしていて、そろそろ Clojure 熱も上がってきたのでなんとなく思いつきで書いてみました。小ネタです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;clojure.core の doc string をたまには思い出そうと。本当は twitterの bot にでもすれば一番いいのですが、doc string が140文字を楽勝で超えてしまう関数もいっぱいあるので、「時折思い出させる」仕掛けをどうするかは、別途考え中です。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;(defn get-doc-string [ns sym] (let [wrt (java.io.StringWriter.)] (binding [*out* wrt] (-&amp;gt;&amp;gt; (ns-resolve ns sym) (meta) (#'clojure.repl/print-doc))) (.toString wrt))) (def syms (-&amp;gt; 'clojure.core ns-map keys sort)) (def clojure-core-docs (-&amp;gt;&amp;gt; syms (map #(get-doc-string 'clojure.core %)))) (defn random-docs [] (println (rand-nth clojure-core-docs)))&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;clojure.doc/doc&lt;/code&gt; 相当のことをやろうとして、&lt;code class=&quot;prettyprint&quot;&gt;clojure.repl/doc&lt;/code&gt; を見てみたら、private な関数 &lt;code class=&quot;prettyprint&quot;&gt;clojure.repl/print-doc&lt;/code&gt; を呼んでいたので、&lt;code class=&quot;prettyprint&quot;&gt;#'&lt;/code&gt; をつけています。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;Usage:&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;user&amp;gt; (random-docs) ------------------------- clojure.core/not-every? ([pred coll]) Returns false if (pred x) is logical true for every x in coll, else true. nil user&amp;gt; (random-docs) ------------------------- clojure.core/rational? ([n]) Returns true if n is a rational number nil user&amp;gt;&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;新年一発目は小ネタということで。今年もよろしくお願いします。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>2013年のまとめ</title>
            <link href="http://ponkore.github.io/2013-12/2013-last-post/index.html" rel="alternate" title="2013年のまとめ" type="text/html" />
            <id>http://ponkore.github.io/2013-12/2013-last-post/index.html</id>
            <published>2013-12-31T00:00:00</published>
            <updated>2013-12-31T00:00:00</updated>
            <content type="html">&lt;h3&gt;2013年のまとめ&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;ことしももう終盤です。ただいま 2013/12/31 21:00 過ぎ、といった時刻になってしまいました。今年一年いろいろありましたが、ざっと思い返して見てみると、あまり進歩がなかったような、そんな残念な気がします。ただ、残念なままといっても、いろいろやったこともあったので、忘れるといけないので振り返りをしておきたいと思います。&lt;/p&gt;&lt;h3&gt;勉強会参加&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;今年は以下の勉強会に参加しました(参加といってもすべて発表を聞く側でした)。そろそろ発表できるネタを仕込めるようにならんとな～。&lt;/p&gt;&lt;h4&gt;並列/並行基礎勉強会(3/23 土)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/1630/&quot;&gt;リンク&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;名古屋です!! 怖かったです!! わからんことがたくさんありすぎて、しかもアウェーな感じがしてビビっていました。今回は頑張って懇親会も参加しました (終電がちょっと心配でしたが)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;結論から言うと、「参加してよかった」です。個人的にはやはり Clojureということで @athos0220 さんの &lt;a href=&quot;http://www.slideshare.net/sohta/introduction-tostm-withclojure&quot;&gt;Clojure で始める STM 入門&lt;/a&gt;に興味がありました。難しい...と思ったのと同時にもっと知りたいという欲求を感じて良い刺激になったと思います。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;あと、懇親会はマサカリの投げ合いの様相を呈していいたのですが、名古屋の人たちはみんな向上心がすごいな、と素直に思いました。&lt;/p&gt;&lt;h4&gt;DevLove関西 今日から始める自動化入門(7/18 木)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://devlove-kansai.doorkeeper.jp/events/4500?utm_campaign=event_4500&amp;amp;utm_medium=email&amp;amp;utm_source=registered_message_2437&quot;&gt;リンク&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;@morriring さんと、みうみうさんこと @kazuhito_m さんのお話＋軽くダイアログ、という構成。みうみうさん、相変わらずハイテンションで面白い話であっという間に時間が過ぎてしまった、というのが正直な印象です。自分の身の回りでは、まだまだ自動化できる余地がいっぱいあり、皆さんがんばっているなぁ、と思うと同時に、この流れに乗らないと競争に負けるような気がしてちょっと焦りを感じるきっかけになりました。&lt;/p&gt;&lt;h4&gt;第６回大阪 Jenkins 勉強会(11/19 金)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/3831/?utm_campaign=event_reminder&amp;amp;utm_source=notifications&amp;amp;utm_medium=email&amp;amp;utm_content=title_link&quot;&gt;リンク&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;Jenkins 勉強会への参加は２回めです。今回は Jenkins を直接どうこうする、というより、一歩進んだ話だったという印象です。@posaune さんの発表はWindows に詳しくない自分にとってはよい勉強になりました。といいつつ、SonarQubeとかまだ使えてません...。&lt;/p&gt;&lt;h4&gt;FreeBSD 勉強会 IN 大阪 Vol.2 (11/29 木)&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/44412&quot;&gt;リンク&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;大阪での FreeBSD 勉強会はあまり機会がないので、物は試しと思い参加してみました。カーネル側の話なので直接仕事に関係するわけではないのですが、こういう勉強会に参加される方と話をしてみたかった、というところです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;メインスピーカーの後藤大地さんの話はもちろん興味深かったのですが、発表後の懇親会がすごくざっくばらん（ビールとお菓子をつまみながら立ち話!!）で楽しい雰囲気が良かったです。懇親会で聞けた興味深い話としては、NetBSD がちょっと最近つらそう、とのこと。対象とするプラットフォームが多すぎる割に開発リソースが足りていないとのこと。FreeBSD は企業でも使っていることがあり企業が積極的にコミットしてきている、OpenBSD はコミュニティが (どういう話か詳細は忘れましたが)順調に育っているようで開発が停滞している感じはしない、DragonFly BSD は...ちょっと忘れてしまいました。なんにせよ、来年早々に FreeBSD 10 RELEASE が出る予定であり、FreeBSD 界隈も賑わっていきそうなので、来年もできれば勉強会に参加していこうと思っています。&lt;/p&gt;&lt;h3&gt;アドベントカレンダー類&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;正直、去年よりも力が尽きてしまった感じ、です。なんだか申し訳ない...。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/02 &lt;a href=&quot;http://connpass.com/event/3991/&quot;&gt;Clojure Contrib Library アドベントカレンダー&lt;/a&gt; / &lt;a href=&quot;https://gist.github.com/ponkore/7744766&quot;&gt;clojure.java.jdbc について(java.jdbc)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/07 &lt;a href=&quot;http://qiita.com/advent-calendar/2013/clojure&quot;&gt;Clojure アドベントカレンダー&lt;/a&gt; / &lt;a href=&quot;http://qiita.com/ponkore/items/30c64c2311d0b9460d02&quot;&gt;leiningen でプロジェクトのテンプレートを作ってみる &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/14 &lt;a href=&quot;http://qiita.com/advent-calendar/2013/lisp&quot;&gt;Lisp アドベントカレンダー&lt;/a&gt; / &lt;a href=&quot;http://qiita.com/ponkore/items/5309023186353de49172&quot;&gt;Clojure で HTML スクレイピングしてみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;paragraph&quot;&gt;Lisp アドベントカレンダーは、今年も力尽きました(肝心のブツが仕上がらないまま...情けない)。Lisp アドベントカレンダーは、ネタを考えるのが難しいんですよね。来年はちゃんとした記事を書きたいです。&lt;/p&gt;&lt;h3&gt;仕事は、というと...&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;正直いろいろと思うようにいかないことが多かった、のと、積み残したことが多いな、というのとが入り混じった一年でした。今のプロジェクト、このままでは来年えらいことになるのが目に見えているのですが、どこまで自分が突っ込んでいったらよいのか、考えあぐねているところです。&lt;/p&gt;&lt;h3&gt;技術的な興味について&lt;/h3&gt;&lt;h4&gt;インフラ関係&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;ここ２年位、ヘタすると去年と今年位、では &lt;code class=&quot;prettyprint&quot;&gt;Chef&lt;/code&gt; あたりが大流行していたという印象ですが、今年は &lt;code class=&quot;prettyprint&quot;&gt;docker&lt;/code&gt; が出てきて、特に年末になるにつれ大流行しているように思います。&lt;strong&gt;Immutable Infrastructure&lt;/strong&gt; なる用語もでてきたようで。個人的には、環境構築の手法なんかが皆で共有できる方向には大賛成です。docker なんてよく出来てると思いますし、こういったものが来年は開発者にどんどん浸透していくのだろうな、と思います。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、こういうオープンなツールが &lt;strong&gt;Windows系&lt;/strong&gt; に降りてくるには時間がかかると思うので、今仕事でやっているプロジェクトのように All Windows でやってるプロジェクトはまだしばらく辛い時代が続くのだろうなぁ、と若干悲観気味に見ています。ただ時代に置いてきぼりにされるのだけは避けたいので適宜勉強しないといけないなぁ、と思っています。&lt;/p&gt;&lt;h4&gt;関数型言語関係&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;今年も Clojure メインで勉強してました。仕事の中でデータ整理とかで実際に使ったりしましたし、Clojure コミュニティの動きもいろいろウォッチしてました。今後どれくらい広がっていくのかは不明ですが、自分にとってはいちばん使い慣れた道具として今後も使っていこうと思っています。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;それとは別に、年末から &lt;code class=&quot;prettyprint&quot;&gt;F#&lt;/code&gt; の勉強を始めました。とりあえず本を読むところから、ということで &lt;a href=&quot;http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5-%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E8%8D%92%E4%BA%95-%E7%9C%81%E4%B8%89-%E3%81%84%E3%81%92%E5%A4%AA/dp/4774145165&quot;&gt;実践 F# 関数型プログラミング入門&lt;/a&gt; を購入し、読んでいます。F#、なかなか良いです。仕事上.Net で開発しているので、周囲に関数型言語を広めるという観点からすると、F# のほうが良いのかもしれません(ClojureCLR が悪い、というわけではないのですが、知名度が...)。&lt;/p&gt;&lt;h4&gt;misaki 関係&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;この Blog は &lt;a href=&quot;https://github.com/liquidz/misaki&quot;&gt;misaki&lt;/a&gt; で書いています。ページコンパイラ自体は default compiler すなわち Clojure の S式で書いているのですが、昨年からテンプレート類を少しいじりました。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;使用している CSS Framework を &lt;a href=&quot;http://ink.sapo.pt/&quot;&gt;ink&lt;/a&gt; v1 から v2 にアップデート。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;シンタックスハイライトを、&lt;a href=&quot;http://code.google.com/p/google-code-prettify/&quot;&gt;Google Code Prettify&lt;/a&gt; から &lt;a href=&quot;http://highlightjs.org/&quot;&gt;hilight.js&lt;/a&gt; に移行(なんとなく流行ってそうだったので...)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;書き方を統一するのに section, subsection, p* といったマクロや関数を用意。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;paragraph&quot;&gt;...他にもいろいろいじりたいところはあるのですが、なかなか着手できないまま今に至った次第です。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;S式で書けるのは良いのですが、&lt;code class=&quot;prettyprint&quot;&gt;misaki&lt;/code&gt; では Blog 上にコードを書くとき、ヒアドキュメント的な記法を使います。それと、Emacs の clojure-mode との相性が今ひとつなのと、Blogを書く道具として Emacs Lisp をもう少し整備したほうがよいかな、とも思っているので、来年はもしかしたら misaki-mode なんかをつくるかもしれません(作らないかもしれません:-)。&lt;/p&gt;&lt;h3&gt;2014年に向けて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;仕事はどんどん増えるだろうけど、なんとかプライベートな時間を作って、同じ会社の 「他の人とは違う」要素を鍛えていきたいと思っています。それから、勉強したことはもっとアウトプットすべきだと今更ながら思っているので、Blog もちゃんと継続的に書けるようにしようと思います。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>misaki での画像の Retina 対応について</title>
            <link href="http://ponkore.github.io/2013-05/misaki-retina/index.html" rel="alternate" title="misaki での画像の Retina 対応について" type="text/html" />
            <id>http://ponkore.github.io/2013-05/misaki-retina/index.html</id>
            <published>2013-05-22T00:00:00</published>
            <updated>2013-05-22T00:00:00</updated>
            <content type="html">&lt;h3&gt;Retina Display でもきれいに表示したい&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;strong&gt; 2013/11/18 以下の記事を書いたのですが、結局やめにしました。&lt;/strong&gt; &lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;今のところ、&lt;a href=&quot;http://retinajs.com/&quot;&gt;retina.js&lt;/a&gt; を採用するつもりでいます。やめにした理由は「筋が悪い」方法だと思ったから、です。クライアント側で動的に変わる解像度というものを、静的に判断できるわけもなく、ちょっとちぐはぐな感じがしました。まあせっかく書いたので記録としては残しておこう、ということで。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;strong&gt; 以下、2013/05/22 に書いた内容です... &lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;iPhone、iPad、MacBookPro Retina model といったいわゆる &lt;strong&gt; Retina Display &lt;/strong&gt;では、画像は縦横２倍に自動的にスケーリングされて表示されます。そうすると、画像は dot-by-dot で高精細に表示されるのではなく、少しぼやけた感じに表示されてしまいます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;これを回避する、すなわち Retina Display でも画像を dot-by-dot できれいに表示するには、img タグに &lt;strong&gt;width&lt;/strong&gt;, &lt;strong&gt;height&lt;/strong&gt; を真面目に指定して、その各々２倍のサイズの高精細画像を用意する、ということのようです （細かな仕様までは知らないです）。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、実際の画像の大きさなんていちいち調べるのも面倒なので、 &lt;a href=&quot;https://github.com/liquidz/misaki&quot;&gt;misaki&lt;/a&gt; で HTML を生成する際に、image のサイズを調べて、実際の半分の大きさの width、height を指定するようにしてみました。misaki ではサイトの出力先は &lt;code class=&quot;prettyprint&quot;&gt;config.clj&lt;/code&gt; の&lt;code class=&quot;prettyprint&quot;&gt;:public-dir&lt;/code&gt;で指定するので、そこを起点に image ファイルをちょっと読み込み、imageファイルのサイズを調べて :width、:height を算出してみました。&lt;/p&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;;; ;; 以下を template/layout/default.clj に仕込んでおく ;; (defn img*2x &amp;quot;img tag for Retina display (iOS Device, MacBookPro)&amp;quot; ([src] (img*2x {} &amp;quot;&amp;quot; src)) ([x src] (cond (string? x) (img*2x {} x src) (map? x) (img*2x x &amp;quot;&amp;quot; src) :else (img*2x {} &amp;quot;&amp;quot; src))) ([attr alt src] (let [public-dir (:public-dir misaki.config/*config*) f (java.io.File. (str public-dir src))] (if-not (.exists f) (img &amp;quot;/img/notfound.png&amp;quot;) (let [r (javax.imageio.ImageIO/read f) w (/ (.getWidth r) 2) h (/ (.getHeight r) 2) attr (merge attr {:width w :height h})] (img attr alt src)))))) ;; ;; Usage: ;; (img*2x &amp;quot;/img/posts/2013-04-19/IMG_1337.JPG&amp;quot;)&lt;/pre&gt;&lt;h3&gt;終わりに&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;Retina じゃないディスプレイだと、image サイズが半分になってしまうので、CSS の Media Query をつかって切り分けをしたいところです（そのうちちゃんとやろう）。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://kray.jp/blog/retina-web/&quot;&gt;ここ (Webサイト＆WebアプリのRetina対応方法まとめ)&lt;/a&gt; を部分的に参考にさせていただきました(ちょっと端折り過ぎた、かもw)。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>QGIS 1.8 の SHAPE ファイル文字化け対策について</title>
            <link href="http://ponkore.github.io/2013-05/qgis-charset/index.html" rel="alternate" title="QGIS 1.8 の SHAPE ファイル文字化け対策について" type="text/html" />
            <id>http://ponkore.github.io/2013-05/qgis-charset/index.html</id>
            <published>2013-05-21T00:00:00</published>
            <updated>2013-05-21T00:00:00</updated>
            <content type="html">&lt;h3&gt;QGIS 1.8 の SHAPE ファイルの読み込み時の文字化けについて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;国土数値情報で公開されている SHAPE ファイル等、日本語の属性情報をもつ SHAPE ファイルを QGIS に読み込むときには、SHAPE ファイルのエンコーディングに合わせたエンコーディングを指定する必要があります。国土数値情報の場合は、&lt;strong&gt;Shift_JIS&lt;/strong&gt; を指定すればよいです(Shift_JIS、SJIS 以外を指定すると文字化けした、はず)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ところが、無事に読み込みに成功しても、別の SHAPE ファイルに保存したりすると、保存先の SHAPE ファイルが文字化けしてしまうことがあります。というか、「読み込みに成功してるのに何で？？？」とずっと思っていました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;が、同じ悩みを抱えている人が他にもおられたようで、解決策がありました。qgis に環境変数として &lt;code class=&quot;prettyprint&quot;&gt;SHAPE_ENCODING=&quot;&quot;&lt;/code&gt; を指定する、という方法です。これを指定すると、ベクタレイヤーを別 SHAPEFILE に保存したりする際に文字化けすることがなくなりました(自分は保存時には UTF-8 を指定するようにしています)。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;# # QGIS 1.8 では Shapefile 読み書き時に文字コード変換が変にかかってしまうので、 # 環境変数 SHAPE_ENCODING を空白にして、QGIS システム内では文字コード変換を # させずに、ダイアログにて明示的に指定する。 # bash$ export SHAPE_ENCODING=&amp;quot;&amp;quot; bash$ open -a qgis&lt;/pre&gt;&lt;h3&gt;Python のバージョンによる問題&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;ところが問題はこれだけではありませんでした。今度は QGIS 起動時にエラーダイアログが出ます。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;# メッセージはこんな感じ Couldn't load plugin fTools due an error when calling its classFactory() method...&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE_ENCODING を指定した時に限り必ず表示されるようになってしまいました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;これはどうも python のバージョンによる問題のようです。 &lt;a href=&quot;http://gis.stackexchange.com/questions/48364/couldnt-load-plugin-ftools-due-an-error-when-calling-its-classfactory-method&quot;&gt;ここ&lt;/a&gt; に類似のエラーがあったので参考にしました。自分の環境には MacPorts の python と OSX(10.7) 標準の python が入っております。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;# MacPorts python bash$ python --version Python 2.7.5 bash$ /usr/bin/python Python 2.7.1 bash$&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;正確にはインストールされているライブラリ等の差異だと思うのですが、qgis が使用する python を /usr/bin/python になるよう、/usr/bin のパスを前に来るように指定すると、エラーダイアログが出なくなりました。&lt;/p&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;# 自分の自宅環境(OSX Lion) だと上記で動かなかった。MacPorts の python (2.7.3) だとダメで # /usr/bin/python (2.7.1) だと動く。なので、PATH 環境変数にも依存...。 # 結局、最終的には、 bash$ export SHAPE_ENCODING=&amp;quot;&amp;quot; bash$ PATH=/usr/bin:$PATH bash$ open -a qgis&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;Python 詳しくないし、原因を真面目に探して修正しだしたりしたらキリがないので、とりあえずはこれでしばらく運用してみます。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>GISについてぼちぼち書いていこう。</title>
            <link href="http://ponkore.github.io/2013-05/gis-getting-started/index.html" rel="alternate" title="GISについてぼちぼち書いていこう。" type="text/html" />
            <id>http://ponkore.github.io/2013-05/gis-getting-started/index.html</id>
            <published>2013-05-12T00:00:00</published>
            <updated>2013-05-12T00:00:00</updated>
            <content type="html">&lt;h3&gt;Why GIS?&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自分の日常の仕事の中で、いろんなデータを見る機会が増えてきたように思います。大量のRDB上の生データが主だったりするのですが、いわゆる&lt;em&gt;Visualization&lt;/em&gt; を真面目にやらないと、いろいろと「ハマる」ことが増えてきました。今までは Excel でなんとかグラフを書いたりセルを色分けしたりで見渡せていたのですが、限界が来るのも近い、といった感じです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;最近は &lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt; のようにド派手なやつとか、他にもググれば JavaScript ライブラリならたくさん出てきます。ただ、今自分が直面している課題としては、地図とか地理情報に密接に関係しているものがあるので、自分の道具として GIS を使えるようにしておきたいのです。&lt;/p&gt;&lt;h3&gt;開発のベースとして何を使う？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;基本的に GIS のライブラリそのもの（内部実装）とかには深く立ち入りたくはありません（他にやることが山ほどあるので）。というわけで、オープンソースかつコミュニティの大きそうな（情報の多そうな）ものをベースに考えざるを得ません。今のところ &lt;a href=&quot;http://www.openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;をメインで考えています。ただ最近 &lt;a href=&quot;http://leafletjs.com/&quot;&gt;leaflet&lt;/a&gt; というやつも結構イケてそうな気もしてきたので、どっちも触りながら考えていこうと思っています。&lt;/p&gt;&lt;h3&gt;地図データは？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;地図を表示するには当然地図のデータが必要です。先ほどの OpenLayers、Leaflet にしても、背景の地図、それにオーバーレイするデータ、それぞれ必要になってきます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;背景の地図については、&lt;a href=&quot;http://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt;であれば、OpenLayers からでも Leaflet からでも自由につかうことができそうです( &lt;a href=&quot;https://maps.google.co.jp/&quot;&gt;Googleマップ&lt;/a&gt;、 &lt;a href=&quot;http://maps.loco.yahoo.co.jp/&quot;&gt;Yahoo!地図&lt;/a&gt;、 &lt;a href=&quot;http://www.bing.com/maps/?FORM=Z9LH1&quot;&gt;bing の地図&lt;/a&gt;、とかは、利用条件がややこしそうなのでちょっと遠慮しときます(基本、社内のオレオレツール用に使うので商用利用前提で考えます))。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;あと選択肢としては、国土交通省が公開している &lt;a href=&quot;http://portal.cyberjapan.jp/index.html&quot;&gt;電子国土&lt;/a&gt; というのがOpenStreetMap 同様、使えそうな感じです。&lt;/p&gt;&lt;h3&gt;表示するデータは？&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;「何を表示したいか？」については、まあいろいろとあるわけですが、実はさしあたって必要となる情報があったりします。鉄道の路線情報です。駅の情報については、&lt;a href=&quot;http://www.ekidata.jp/&quot;&gt;駅データ.jp&lt;/a&gt; さんなら駅の位置情報(緯度、経度)とつながり(どの路線にどの順でつながっている) がわかります。ただ、路線の線形（どんなポリゴンで構成されているか）まではわかりません。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;線形までは考えない、という手もあるのですが、実は国土交通省が公開している&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/&quot;&gt;国土数値情報ダウンロードサービス&lt;/a&gt;というのがあり、その中に鉄道の路線のベクタデータが公開されています。幸いなことに、アンケートにきちんと回答し地図上に「国土数値情報を使って表示している」旨を示しさえすれば、(悪いことをしない限り商用でも)利用することができます(&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/other/yakkan.html&quot;&gt;約款&lt;/a&gt; )。&lt;/p&gt;&lt;h3&gt;鉄道路線のデータについて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;先ほど国土数値情報ダウンロードサービスから入手できる、と書きましたが、入手できるのは、&lt;strong&gt;JPGIS2.1(GML)準拠及びSHAPE形式&lt;/strong&gt; です。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;JPGIS は日本国内における地理情報の標準規格、とでも言えばよいのでしょうか。詳細はぐぐってください。(GML) となっているのは、JPGIS における符号化形式として XML をベースとした Markup Language になります（がこちらも詳細はぐぐってくださいw)。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE 形式は、GIS でわりと標準的に用いられる、バイナリー形式のファイルフォーマットです。バイナリーなので直接いじるには面倒ですが、ちょっとしたデータベースのような感じになっており、コンパクトかつ高速にアクセスできる、というメリットがあります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;鉄道の路線情報は、JPGIS2.1(GML)とSHAPE形式が一緒になった ZIP ファイル (N05-11_GML.zip) になります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;入手方法は、&lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/gml/gml_datalist.html&quot;&gt;国土数値情報ダウンロードサービス&lt;/a&gt; のページの &lt;strong&gt;国土骨格&lt;/strong&gt; というグループにある &lt;strong&gt;鉄道時系列（線、点）&lt;/strong&gt;となっているところからダウンロードします。途中のアンケートとかは、ちゃんと回答しましょう。入手できるファイルは、11.61MB 程です。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;入手したファイルを解凍すると、以下のファイルが含まれています。全国の鉄道路線情報になります。&lt;/p&gt;&lt;table class=&quot;ink-table alternating bordered hover&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;ファイル&lt;/th&gt;&lt;th&gt;内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;KSJ-META-N05-11.xml&lt;/td&gt;&lt;td&gt;下記の N05-11.xml (国土数値情報（鉄道時系列）データ) の XML スキーマ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11.xml&lt;/td&gt;&lt;td&gt;国土数値情報（鉄道時系列）データ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11_RailroadSection2.dbf, N05-11_RailroadSection2.shp, N05-11_RailroadSection2.shx&lt;/td&gt;&lt;td&gt;路線の線形情報(SHAPEファイル)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;N05-11_Station2.dbf,N05-11_Station2.shp,N05-11_Station2.shx&lt;/td&gt;&lt;td&gt;駅の位置情報のSHAPEファイル&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;データを加工する(QGIS)&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自分としては、JR西日本のデータだけが欲しいので、それ以外のデータは取り除きたいところです。プログラムを書いて GML データから抽出する、という手段も考えられますが、ここはひとつ勉強も兼ねて &lt;a href=&quot;http://www.qgis.org/&quot;&gt;QGIS&lt;/a&gt; を使ってみます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;strong&gt;QGIS(Quantum GIS)&lt;/strong&gt; は、いわゆる「デスクトップGISツール」で、Windows/Linux/MacOSX/FreeBSD等のプラットフォームに対応しているオープンソースのツールです(ライセンスはGPL)。ありがたいことに、GUI のメニューがほとんど日本語に翻訳されているので、初心者にもとっつきやすいです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;2013/05月時点での最新は v1.8 です。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.15.01.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;ここでは、QGIS を使って、鉄道時系列データをいじって、JR西日本のみのデータを作成してみます(QGISのインストールについては割愛します)。&lt;/p&gt;&lt;h3&gt;SHAPEファイルの読み込み&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPE ファイルは、QGIS上では 1レイヤとして取り込まれます。ということで、[レイヤ]メニューから[ベクタレイヤの追加...]を選択します。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.30.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;あとはダイアログに従ってソースタイプ：ファイル、データセット：.shpファイル、を指定します(エンコーディングは Shift_JIS としましたが、Shift_JIS 以外で OK かどうかはちょっと不明です)。まずは駅のほう (N05-11_Station2.shp)からやってみましょう。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.20.50.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;Open を実行すると、「空間参照システム選択」というダイアログが表示されます。ここではとりあえずデフォルトどおり、&lt;strong&gt;WGS84 EPSG:4326&lt;/strong&gt; を選択しておきます(というかデフォルトのまま変更しない)。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.21.25.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;そのまま実行すると、&lt;strong&gt;N05-11_Station2&lt;/strong&gt; というレイヤが作成され、駅の位置を表している点が画面に表示されます。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;同様に、路線情報(N05-11_RailroadSection2.shp)も取り込んでみます。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.46.png&quot; /&gt;&lt;h3&gt;属性テーブル&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;SHAPEファイルは地理情報をもつデータベースファイルのようなものです。QGIS にはこのデータベースを直接操作する機能があります。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;まずはレイヤを選択して[レイヤ]メニューから[属性テーブルのオープン]を選択します。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.02.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;すると、以下のようなダイアログが表示されます。ベクタレイヤを構成する属性情報が一覧として表示されます。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.22.15.png&quot; /&gt;&lt;h3&gt;属性テーブルの操作(不要な情報の削除)&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;属性テーブルの右下に[アドバンストサーチ]というボタンがあります。これを押すと選択条件を指定するダイアログが表示されます。ここで、「西日本旅客鉄道」以外の行を検索し、行削除をすることで、JR西日本だけのデータが出来上がることになります。（メンドクサイので説明は省略w）&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;で、削除が終わった状態で画面を表示させると、以下のような感じになります。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.45.39.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;大阪近辺を表示させたのですが、味も素っ気も無いですね。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、この状態だと、「すでに廃線となっている路線およびその駅」とか、「ある時期まであった路線が少し移動した」といった情報も一緒に表示されているはずです(時系列情報として持っています)。ですので、(自分ツール用としては)「今生きている路線データ」のみにして他は削除してしまいました。&lt;/p&gt;&lt;h3&gt;ラベリング&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;QGIS にはラベリングという機能があります。レイヤの属性情報に応じて、地物(地図上に表示するブツ)に文字列を表示したり色分けしたり、結構こまかな表示制御を行うことができます。[レイヤ]-[ラベリング]を選択すると、レイヤラベリング指定ダイアログが表示されます。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.48.19.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;デフォルトでは、一番上の「このレイヤのラベル」のチェックボックスが off になっているのでまず on にします。次に、ラベル表示するテキストをドロップダウンリストから選択します。この SHAPE ファイルではぱっと見わかりにくいのですが、N05_011 というのが駅名を表しているのでこれを選択します。ちなみに路線のレイヤでは、路線名は N05_002 なのでそちらを選択します。今回は路線名を赤くしてみました。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.52.21.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;で、できあがったのが下図になります。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_11.52.31.png&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;もう少し引いてみると、下のような感じです。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-05-12/2013-05-11_13.04.08.png&quot; /&gt;&lt;h3&gt;いったんまとめ&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;今回は、GIS、国土数値情報、QGISでのデータ加工、と駆け足で書いてしまいました(よって内容が薄いorz)。次回からは、SHAPE ファイルからデータをGeoJSON 形式に抽出して、遊んでみたいと思います。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>Raspberry PI 買ったったー</title>
            <link href="http://ponkore.github.io/2013-04/raspberry-pi/index.html" rel="alternate" title="Raspberry PI 買ったったー" type="text/html" />
            <id>http://ponkore.github.io/2013-04/raspberry-pi/index.html</id>
            <published>2013-04-19T00:00:00</published>
            <updated>2013-04-19T00:00:00</updated>
            <content type="html">&lt;h3&gt;Raspberry PI 買いました。&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;タイトルの通り、買いました。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-04-19/IMG_1337.JPG&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;通販ではなく、日本橋のシリコンハウス共立で。数日前に &lt;a href=&quot;http://blog.siliconhouse.jp/archives/51988254.html&quot;&gt;シリコンハウスのBlog&lt;/a&gt; で入荷したとの案内があったので、Type-B を買っちゃいました(4,410円)。こういうものを買うときは「とりあえず買って用途は後から考える」ことが多く、今回もそのパターンです。特に何をしたいから、という強い理由があるわけではありません。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ちなみに、給電は、USB mini-A で、これに相当する AC アダプタも必要なのですが、さしあたっては自宅にある &lt;strong&gt;eneloop mobile booster&lt;/strong&gt; に付属していたやつを使うことにして、今回は購入していません。SDカードはちょっと贅沢をして 32GB のもの (ヨドバシで￥4,000 強) を購入。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;家に帰って作業時間を何とか作って、火をいれてみました。SD には、公式の &lt;a href=&quot;http://www.raspberrypi.org/downloads&quot;&gt;ダウンロードページ&lt;/a&gt; から落としてきた &lt;strong&gt;Raspbian wheezy&lt;/strong&gt; をインストール(というか焼いたというか...)。ディスプレイは専用で使えるものの手持ちがないので、リビングのTVに HDMI 経由でつなぎました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;結果は、驚くほどあっさりと起動(GUI は使うつもりがないので試していませんが...)。&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;/img/posts/2013-04-19/IMG_1338.JPG&quot; /&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、仮設状態のまま運用するわけにもいかないので、Wireless ルータのそばに移設をしたところ、ネットワーク経由で反応したりしなかったり、という症状が出てしまいました。電源が不安定なのか、はたまたノイズ等が悪さをしているのか...ルータのそばにはディスプレイがないので、ネットワーク経由での接続ができないと状況がわかりません(がんばれば USB シリアルログインとかできそうな気はするのですが、それなりに hardware も要るし...。というわけで、今日のところはここで時間切れです。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;でも、いろいろと可能性を感じるおもちゃですw 早くケースを買って(あるいは作って)、安定稼働させよう。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>いろんな言語でのサンプル(google code prettify のテスト)</title>
            <link href="http://ponkore.github.io/2013-01/post-sample/index.html" rel="alternate" title="いろんな言語でのサンプル(google code prettify のテスト)" type="text/html" />
            <id>http://ponkore.github.io/2013-01/post-sample/index.html</id>
            <published>2013-01-18T00:00:00</published>
            <updated>2013-01-18T00:00:00</updated>
            <content type="html">&lt;p class=&quot;paragraph&quot;&gt;misakiで google code prettify するパターンを書いてみます。&lt;/p&gt;&lt;h3&gt;clojure&lt;/h3&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;; CLJ (defn fact[n] &amp;quot;factorial&amp;quot; (if (= n 0) 1 (* n (fact (dec n)))))&lt;/pre&gt;&lt;pre class=&quot;prettyprint clojure&quot;&gt;; CLOJURE (defn fact[n] &amp;quot;factorial&amp;quot; (if (= n 0) 1 (* n (fact (dec n)))))&lt;/pre&gt;&lt;h3&gt;lisp&lt;/h3&gt;&lt;pre class=&quot;prettyprint lisp&quot;&gt;; LISP (defun fact (n) &amp;quot;factorial&amp;quot; (if (= n 0) 1 (* n (fact (1- n)))))&lt;/pre&gt;&lt;h3&gt;sql&lt;/h3&gt;&lt;pre class=&quot;prettyprint sql&quot;&gt;-- SQL select user_name, count(*) from user_tables where user_name like 'SCOT%' group by user_name having count(*) &amp;gt; 1 order by 1 /&lt;/pre&gt;&lt;h3&gt;java&lt;/h3&gt;&lt;pre class=&quot;prettyprint java&quot;&gt;// JAVA public class Foo extends Hoge { // 適当な定数 private static final int BOO = 0; // メインだけ書いてみる public static void main(String[] args) { System.out.println(&amp;quot;Hello, misaki!&amp;quot;); } }&lt;/pre&gt;&lt;h3&gt;html&lt;/h3&gt;&lt;pre class=&quot;prettyprint html&quot;&gt;&amp;lt;!-- HTML --&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;pre&amp;gt; hoge fuga &amp;lt;/pre&amp;gt; Hello, &amp;lt;B&amp;gt;&amp;lt;I&amp;gt;misaki!&amp;lt;/I&amp;gt;&amp;lt;/B&amp;gt;&amp;lt;br&amp;gt;&lt;/pre&gt;&lt;h3&gt;css&lt;/h3&gt;&lt;pre class=&quot;prettyprint css&quot;&gt;/* ============================================================================= HTML5 Boilerplate CSS: h5bp.com/css ========================================================================== */ article, aside, details, figcaption, figure, footer, header, hgroup, nav, section { display: block; } audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; } audio:not([controls]) { display: none; } [hidden] { display: none; }&lt;/pre&gt;&lt;h3&gt;shell&lt;/h3&gt;&lt;pre class=&quot;prettyprint bash&quot;&gt;bash$ cat ./hello.sh #!/bin/sh echo &amp;quot;hello, misaki.&amp;quot; bash$ chmod +x ./hello.sh bash$ ./hello.sh hello, misaki. bash$&lt;/pre&gt;&lt;h3&gt;ruby&lt;/h3&gt;&lt;pre class=&quot;prettyprint ruby&quot;&gt;module Nendo&lt;/pre&gt;&lt;p class=&quot;paragraph&quot;&gt;まだまだ調整が必要ですねぇ。WebDesignって楽しいけど難しいですね。&lt;/p&gt;</content>
        </entry>
        <entry>
            <title>来年から本気出す(といっても今日は大晦日)</title>
            <link href="http://ponkore.github.io/2012-12/2012-last-post/index.html" rel="alternate" title="来年から本気出す(といっても今日は大晦日)" type="text/html" />
            <id>http://ponkore.github.io/2012-12/2012-last-post/index.html</id>
            <published>2012-12-31T00:00:00</published>
            <updated>2012-12-31T00:00:00</updated>
            <content type="html">&lt;h3&gt;Blog を始めるにあたって&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;この記事を書いているのは、2012/12/31 22:00 も過ぎた、紅白歌合戦をやっている真っ最中です。実はこのBlog、どういうコンセプトでどういうデザインで書くか、ということばかりに気を取られて、細かな詰めもなにもできておりません。正直、不細工な状態のままでの公開となってしまいました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;不細工な状態での公開は自分にとってはすごく嫌なのですが、「始めなければなにも始まらない」ということを自分はよく知っているつもりなので、こまかな修正はおいおいやっていくにしても、とりあえずスタートラインには立とう、と思った次第です。&lt;/p&gt;&lt;h3&gt;記事の内容について&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;基本的には「技術系Blog」に徹底しようと思っています。自分の日々の出来事や心情とかはあまり書きません。そのかわり、自分が興味を示している技術的な事柄について、書き記す場にしたいと思っています。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、「自分が興味を示している技術」といっても幅が広すぎても発散して面白くなくなりそうなので、ソフトウェア関連、位の縛りをかけておきます。&lt;/p&gt;&lt;h3&gt;2012年の振り返りなど&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;自己紹介してもつまらないので、2012年に自分の身の回りであったイベントで簡単に振り返ってみたいと思います。&lt;/p&gt;&lt;h4&gt;2012/04/22 Kyoto.clj 第１回&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/27149&quot;&gt;Kyoto.clj&lt;/a&gt; というイベントに参加しました。実は自分は社外勉強会への参加はこれが初めてとなります。参加、といってもこのときは聞き手だけでした。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;自分は Clojure に興味を持ったのは 2011年の秋頃で、ネットや本で勉強をしていたのですが、イベントがあると知ったので参加してみることにしました。年齢が年齢だけに(秘密ですが40後半)場違いかな、とも思ったのですが、やはりそこは「始めなければ始まらない」という考えに基づき行ってみました。今となってはこれが今年のその後の自分の行動を変革させる第１歩になってたんですね。&lt;/p&gt;&lt;h4&gt;2012/07/28 Clojure Programming お菓子会&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/30330&quot;&gt;Clojure Programming お菓子会&lt;/a&gt; に参加しました。このときは、一応自分で何か発表しようと思い、事前に自分が２章を担当すると宣言して、へたくそながらも資料を作って発表しました。&lt;/p&gt;&lt;iframe allowfullscreen=&quot;allowfullscreen&quot; height=&quot;356&quot; src=&quot;http://www.slideshare.net/slideshow/embed_code/13782976&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; width=&quot;427&quot;&gt;&lt;/iframe&gt;&lt;p class=&quot;paragraph&quot;&gt;このときは確か参加者が少なく(6名位？)、あまり緊張もしませんでしたが、「なんか貢献したかな？」というちょっとだけハテナがつくものの実績を作っておいてよかったと思っています。やっぱり勉強会は発表したほうが自分の成長にもつながるわけですし。&lt;/p&gt;&lt;h4&gt;2012/08/04 Kyoto.lisp ハッカソン&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/event/E0007877&quot;&gt;Kyoto.lisp ハッカソン&lt;/a&gt; というイベントに参加しました。年齢的にもおっさんすぎる自分が参加しても良いものか、と不安はあったのですが、もう気持ち的には「やるしかない」という感じです。Kyoto.lisp #1 というイベントが春にあったのですが、参加できずustream を見てるだけでしたので、ぜひ参加したいという意思だけは強くもってました。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;ただ、ハッカソンというイベントの性質上、何か自分でも「ネタ」を仕込んでおかないといけないのですが、手持ちで良さげなネタがない...。苦肉の策で、今も使っている Static Site Generator の &lt;a href=&quot;https://github.com/liquidz/misaki&quot;&gt;misaki&lt;/a&gt; にちょっと手を入れるだけ、というなんともしまらない結果に...。それでも、懇親会で lisp ネタでとても盛り上がり楽しかったのを記憶しています。&lt;/p&gt;&lt;h4&gt;2012/10/21～24 International Lisp Conference (ILC) 2012&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://www.international-lisp-conference.org/2012/index.html&quot;&gt;Lisp の国際的なイベントILC2012&lt;/a&gt; に参加できませんでした orz。いにしえの Lisp マシン動態展示もあるよ、と事前に聞いていたのですが、日程と金銭的問題とで参加できず。ちょっと残念な思いをしました。&lt;/p&gt;&lt;h4&gt;2012/11/10 DevLove 関西2012&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://devlove-kansai.doorkeeper.jp/events/1757&quot;&gt;DevLove関西2012&lt;/a&gt; に参加。テクニカルセッションを主に聞いていたのですが、参加者、発表者ともに熱気がすごくて圧倒された一日でした。懇親会なしで申し込んでいたのですが、結局懇親会に参加。懇親会での LT 大会もかなりの勢いだったのですが、自分の方が体調を崩してしまい、パワーを少しもらいそこねてしまった感じです。ちなみに、翌週の土曜日に Scala &amp; Play Framework 勉強会というのがあり参加を申し込んでいたのですが、体調を心配してキャンセルしてしまいました。&lt;/p&gt;&lt;h4&gt;2012/11/24 第２回 関数型言語勉強会 大阪&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://atnd.org/events/33084&quot;&gt;第２回 関数型言語勉強会 大阪&lt;/a&gt; に参加しました。定員50名があっという間に埋まるという、恐ろしく人気の高い勉強会。人気が高いのは事前に知っていたので、早めに会場に入り、わりと前の方の席に座れたので、発表内容もはっきりと聞き取れて、いろいろと勉強になりました。ただ、この場で Clojure に関する発表が無かったので、次回があれば自分がなにかネタを仕込んで発表しようかな、と思っています。(そろそろ仕込み始めないとやばいのか???)&lt;/p&gt;&lt;h4&gt;2012/12/01 関西Javaエンジニアの会スペシャル&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/1261/&quot;&gt;関西Javaエンジニアの会スペシャル&lt;/a&gt;に参加しました。JavaOne 2012 報告、ということでこちらもかなり勢いがある感じがしました。自分は仕事では、.Net 関連のプロジェクトに関わることが多くなりつつあるのですが、個人的には Java 好きです。できれば今後もずっと Java に関わって行きたいと思っています。&lt;/p&gt;&lt;h4&gt;2012/12/21 第4回大阪Jenkins勉強会&lt;/h4&gt;&lt;p class=&quot;paragraph&quot;&gt;&lt;a href=&quot;http://connpass.com/event/1412/&quot;&gt;第4回大阪Jenkins勉強会&lt;/a&gt; に参加しました。平日の夜、ということで、しかもちょっと体調不良だったのですが、少々無理してでも行ったかいがありました。みんな Jenkins 大好きで、いろいろとノウハウをもっている人たちが、Jenkins コミュニティを引っ張っていっている、そんな力のようなものを感じました。体調が良ければ懇親会行きたかったです。&lt;/p&gt;&lt;h3&gt;アドベントカレンダーも書きました&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;今年は昨年(2011年)以上にいろいろとアドベントカレンダーがあり、自分も無理しない範囲で３つ記事を書きました。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/04 Lisp Reader Macro アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4195740&quot;&gt;Clojure のリーダーマクロについて&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/06 HENTAI アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4216377&quot;&gt;Clojure から POI ってみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;paragraph&quot;&gt;12/11 Lisp アドベントカレンダー &lt;a href=&quot;https://gist.github.com/4252252&quot;&gt;sqlkorma 使ってみた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;paragraph&quot;&gt;無理しない範囲で、と書きましたが、Lisp アドベントカレンダーは正直スベりましたwww。来年はもっと Lisp 力をつけないと。&lt;/p&gt;&lt;h3&gt;#clojure 入門者向け勉強会 #mitori_clj&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;Clojure 入門者向けの非同期勉強会という名目で &lt;a href=&quot;http://www.zusaar.com/event/455057&quot;&gt;mitori_clj&lt;/a&gt; というものに参加しています(今も継続中)。&lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; の問題をClojure で解いて、コードを Gist で公開して有識者に突っ込んでもらう、というものです。Clojure も Project Euler も奥が深い...。いろいろと勉強になってます。&lt;/p&gt;&lt;h3&gt;2013年に向けて&lt;/h3&gt;&lt;p class=&quot;paragraph&quot;&gt;来年まであと30分を切りましたwww 。2012年はなんだかんだでまとまった量のプログラムといえば Clojure か Emacs Lisp しか書いていない、という驚愕の事実がありました(仕事を休職していたのが大きいのですが...)。来年は、Clojure をどうにかこうにか仕事場に持ち込めないか、考えてみたいですね。&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;あと、昨年中途半端な状態で放置しているもの(GIS/MapServer 関連、ClojureCLR、ExcelDNA、etc) をなんとか自分の「味方」に付けることができるようにしたいなぁ。&lt;/p&gt;</content>
        </entry>
    </feed>
